---
title: "ECCB Paper HoloFood Salmon - MOFA2 Analysis"
date: "`r Sys.Date()`"
package: HoloFoodR
output:
    BiocStyle::html_document:
        fig_height: 7
        fig_width: 10
        toc: yes
        toc_depth: 2
        number_sections: true
vignette: >
    %\VignetteIndexEntry{mia}
    %\VignetteEngine{knitr::rmarkdown}
    %\VignetteEncoding{UTF-8}
---

```{r, include = FALSE}
library(knitr)
knitr::opts_chunk$set(
    collapse = TRUE,
    comment = "#>",
    cache = TRUE
)
```

```{r setup}
# List of packages that we need
packages <- c(
    "ggplot2", "knitr", "mia", "dplyr", "miaViz", "MOFA2",  "patchwork", "reticulate", "MGnifyR", "reshape2"
    )

# Get packages that are already installed installed
packages_already_installed <- packages[ packages %in% installed.packages() ]

# Get packages that need to be installed
packages_need_to_install <- setdiff( packages, packages_already_installed )

# Loads BiocManager into the session. Install it if it not already installed.
if( !require("BiocManager") ){
    install.packages("BiocManager")
    library("BiocManager")
}

# If there are packages that need to be installed, installs them with BiocManager
# Updates old packages.
if( length(packages_need_to_install) > 0 ) {
   install(packages_need_to_install, ask = FALSE)
}

# Load all packages into session. Stop if there are packages that were not
# successfully loaded
pkgs_not_loaded <- !sapply(packages, require, character.only = TRUE)
pkgs_not_loaded <- names(pkgs_not_loaded)[ pkgs_not_loaded ]
if( length(pkgs_not_loaded) > 0 ){
    stop("Error in loading the following packages into the session: '", paste0(pkgs_not_loaded, collapse = "', '"), "'")
}
```

## Import data

### Retrieve HoloFood data

```{r get_animals, eval=FALSE}
# Get salmon samples
salmons <- HoloFoodR::doQuery("animals", system = "salmon", use.cache = TRUE)

# Get only salmon metagenomic and fatty acid data
salmons <- salmons |>
  filter(fatty_acids == TRUE & metagenomic_assembly == TRUE)
```

```{r get_animal_data, eval=FALSE}
# Get salmon data
salmon_data <- HoloFoodR::getData(
  accession.type = "animals",
  accession = salmons[["accession"]],
  use.cache = TRUE
)

# Get salmon samples
salmon_samples <- salmon_data[["samples"]]

# Get sample IDs
salmon_sample_ids <- unique(salmon_samples[["accession"]])
```

```{r get_samples, eval=FALSE}
# Get salmon MAE experiments as MAE object
mae <- HoloFoodR::getResult(
  salmon_sample_ids,
  use.cache = TRUE
)

# Save salmon MAE
saveRDS(object = salmon_mae, file = "../inst/extdata/salmon_mae_without_mgnify.RDS")

# Show available salmon experiments
experiments(mae)
```

### Fetch metagenomic data from MGnify

HoloFood database does not include the data for metagenomic assemblies which
can be retrieved from [MGnify portal](https://www.ebi.ac.uk/metagenomics).

```{r get_metagenomic_samples, eval=FALSE}
# Create MGnify object
mg <- MgnifyClient(
  useCache = TRUE,
  cacheDir = ".MGnifyR_cache"
  )

# Select only metagenomic assembly samples types
metagenomic_salmon_samples <- salmon_samples[
    salmon_samples[["sample_type"]] == "metagenomic_assembly", ]

# Search for sample IDs in MGnify database
salmon_analysis_ids <- searchAnalysis(
  mg,
  type = "samples",
  metagenomic_salmon_samples[["accession"]]
)
```

```{r get_metagenomic, eval=FALSE}
# Get metagenomic taxonomic data for salmon from MGnify
tse <- MGnifyR::getResult(
  x = mg,
  accession = salmon_analysis_ids,
  get.func = FALSE
)

# Save salmon_metagenomic_tse
saveRDS <- saveRDS(object = tse, file = "../inst/extdata/salmon_metagenomic_tse.RDS")

tse
```

Data fetched from MGnify has MGnify-specific identifiers. We have to first
rename samples with HoloFood specific ID and then add the data to
MultiAssayExperiment combining all the data.


```{r add_metagenomic_data, eval=FALSE}
.add_MGnify <- function(
        mae, tse, holofood.id = "sample_biosample",
        exp.name = "metagenomic_assembly", new.exp = "metagenomic",
        replace = TRUE){
    # Rename columns based on HoloFood ID
    colnames(tse) <- colData(tse)[[holofood.id]]
    
    # Merge add MGnify metagenomic data to the existing metagenomic_assembly
    # experiment. Get the experiment from HoloFood data.
    tse2 <- mae[[exp.name]]
    
    # Combine sample metadata
    cd1 <- as.data.frame(colData(tse))
    cd2 <- as.data.frame(colData(tse2))
    cd <- merge(
        cd1, cd2,
        by.x = holofood.id,
        by.y = "accession",
        all.x = TRUE
    )
    rownames(cd) <- cd[[holofood.id]]
    
    # Now order colData to ensure that order is correct
    cd <- cd[colnames(tse), ]
    
    # Add it to TreeSE
    colData(tse) <- DataFrame(cd, check.names = FALSE)
    
    # Rename to match Holofood
    colnames(tse) <- colData(tse)[[holofood.id]]
    
    # Now order the data based on TreeSE in MAE
    # First take those columns that can be found
    mae[[exp.name]] <- mae[[exp.name]][
        , colnames(mae[[exp.name]]) %in% colnames(tse) ]
    
    # Then order
    tse <- tse[, match(colnames(mae[[exp.name]]), colnames(tse))]
    # And add to MAE in place of old experiment
    if( replace ){
        mae[[exp.name]] <- tse
    } else{
        # Get sample map
        sample_map <- sampleMap(mae)
        # Get samples that are matching with those one that are being added
        add_sample_map <- sample_map[
            match(colnames(tse), sample_map[["colname"]]), ]
        # Rename the experiment
        add_sample_map[["assay"]] <- new.exp
        # Add to sample map'
        sample_map <- rbind(sample_map, add_sample_map)
        # Create MAE
        tse <- ExperimentList(temp = tse)
        names(tse) <- new.exp
        
        exp_list <- c(experiments(mae), tse)
        mae <- MultiAssayExperiment(
            exp_list, colData = colData(mae), sampleMap = sample_map)
    }
    return(mae)
}

mae <- .add_MGnify(mae, tse)

# Save to merged MAE object to RDS
saveRDS(object = mae, file = "../inst/extdata/salmon_mae.RDS")
```

## Data preprocess

```{r load_data}
# path <- system.file("extdata", "salmon_mae.RDS", package = "HoloFoodR")
# salmon_mae <- readRDS(path)
mae <- readRDS("../inst/extdata/salmon_mae.RDS")

# Fetch only experiments that we need
mae <- mae[, , c("FATTY ACIDS MG", "metagenomic_assembly")]
```

```{r preprocess}
# From metabolite data, remove organ-fatty acids row as it only contains a
# string value "muscle"
tse <- mae[[1]]
tse <- tse[!(rowData(tse)[["marker.name"]] %in% c("Organ-fatty acids")), ]
mae[[1]] <- tse

# Transform matrices to numeric. There are some values that are "< 0.01".
# If a number is < 0.01, assume it to be 0.
assay <- assay(mae[[1]], "counts")
assay[ assay == "<0.01" ] <- 0
assay <- apply(assay, c(1, 2), function(x) as.numeric(gsub(",", ".", x)))

# Reassign assay back to MAE
assay(mae[[1]], "counts") <- assay

# From metagenomics data, remove those rows that do not have taxonomy info
not_empty <- !apply(rowData(mae[[2]]), 1, function(x) all(is.na(x)))
mae[[2]] <- mae[[2]][ not_empty, ]
```

For demonstration purposes, we will focus on investigating two experiments (`FATTY ACIDS MG` and `metagenomic_assembly`) within the trial A that considered the addition
of fermented algae meal in the diet of salmons.

```{r preprocess2}
# Filter MAE object to include only Trial A
mae <- mae[ , colData(mae)[["Trial code"]] == "SA", ]
mae
```

```{r transformation}
# Transform fatty acids in mg with log10
mae[[1]] <- transformAssay(
    mae[[1]],
    assay.type = "counts",
    MARGIN = "samples",
    method = "log10",
    pseudocount = TRUE
)

# Agglomerate metagenomics data to Genus level and add it to altExp slot
rank <- "Genus"
altExp(mae[[2]], rank) <- agglomerateByRank(mae[[2]], rank)

# Transform microbiome with centered log-ratio method
altExp(mae[[2]], rank) <- transformAssay(
    altExp(mae[[2]], rank), method = "relabundance")
altExp(mae[[2]], rank) <- transformAssay(
    altExp(mae[[2]], rank), assay.type = "relabundance", method = "clr", pseudocount = TRUE)
```

## Data exploration

```{r show_metadata2}
# Display columns of MAE object to select those of interest
colData(mae) |> names()
```

```{r plot_abundance}
colData(altExp(mae[[2]]))[["host.diet.treatment"]] <- colData(altExp(mae[[2]]))[["host.diet.treatment"]] |>
  factor(levels = c(
    "Jaguar: SA 2.0% seaweed",
    "Cougar: SA 1.5% seaweed",
    "Lion: SA 1.0% seaweed",
    "Puma: SA 0.5% seaweed",
    "Tiger: SA Control"
  ))
plotAbundanceDensity(altExp(mae[[2]], rank), assay.type = "clr", colour_by = "host.diet.treatment")
```

## Cross-correlation analysis

```{r cross-correlation analysis}
#| fig-width: 15
#| fig-height: 15
# For cross-correlation analysis and MOFA2, replace original metagenomics data 
# with agglomerated one, remove additional assays and remove additional colData.
mae_sub <- mae
mae_sub[[2]] <- altExp(mae_sub[[2]], rank)

# Filter genera by prevalence and add it to altExp slot
altExp(mae_sub[[2]], "prev_genus") <- subsetByPrevalentFeatures(mae_sub[[2]], prevalence = 0.2, detection = 0.001)

assays(mae_sub[[1]]) <- assays(mae_sub[[1]])[ names(assays(mae_sub[[1]])) %in% c("log10") ]
assays(mae_sub[[2]]) <- assays(mae_sub[[2]])[ names(assays(mae_sub[[2]])) %in% c("clr") ]

# Take those samples that can be found from both experiments
mae_sub <- intersectColumns(mae_sub)

# Perform cross-correlation analysis
res <- testExperimentCrossCorrelation(
    mae_sub, experiment1 = 1, experiment2 = 2,
    altexp2 = "prev_genus",
    method = "kendall",
    assay.type1 = "log10", assay.type2 = "clr",
    mode = "matrix"
    )

library(ComplexHeatmap)
library(shadowtext)

# Create a heatmap and store it
plot <- Heatmap(
    res$cor,
    # Print values to cells
    cell_fun = function(j, i, x, y, width, height, fill) {
        # If the p-value is under threshold
        if( !is.na(res$p_adj[i, j]) & res$p_adj[i, j] < 0.05 ){
            # Print "X"
          grid.shadowtext(sprintf("%s", "X"), x, y, gp = gpar(fontsize = 10, col = "white"))
        }
    },
    heatmap_legend_param = list(title = "", legend_height = unit(5, "cm"))
)
plot
```

## Differential abundance analysis

Differential abundance analysis of fatty acids.

```{r wilcox_test}
# Add treatment concentration and treatment code to fatty acid view
merged_fatty_acid <- merge(x = colData(mae_sub[[1]]), y = colData(mae)[c("animal", "Treatment concentration", "Treatment code")], all.x = TRUE, by = "animal")
rownames(merged_fatty_acid) <- merged_fatty_acid$accession
colData(mae_sub[[1]]) <- merged_fatty_acid

# Add treatment group to compare differential abundance of fatty acids on
colData(mae_sub[[1]])[["treatment_group"]] <- as.factor(
  ifelse(
    colData(mae_sub[[1]])[["Treatment concentration"]] == 0,
    "control",
    "treatment")
)

# Melt the data
df <- meltAssay(mae_sub[[1]], assay.type = "log10", add_col_data = "treatment_group")

p_values <- c()
assay_name <- "log10"
treatment_group <- "treatment_group"

for (name in rownames(mae_sub[[1]])) {
  temp <- df[df$FeatureID == name, ]
  formula <- as.formula(paste0(assay_name, "~", treatment_group))
  p_values <- c(p_values, wilcox.test(formula, temp)$p.value)
}

# Adjusts p-values
p_values <- p.adjust(p_values, method = "fdr")

# Create data.frame from p-values data
p_values <- data.frame(fatty_acid = rownames(mae_sub[[1]]), p_value = p_values)

# Order data by p-value in ascending oder
p_values <- p_values[order(p_values$p_value), ]

# Create a plot, store it, and print it
plot <- ggplot(p_values, aes(x = p_value)) +
    geom_histogram(bins = 30, color="darkred", fill="lightblue") +
    labs(x = "P-value", y = paste0("Number of fatty acids")) +
    geom_vline(xintercept = 0.05, color = "red")
    # geom_text(aes(0.05, 1, label = 0.05, angle = 90))  +
    # theme(text = element_text(size = 8))
plot
```

```{r}
p_values |> kable(digits = 10)
```

## Kruskall-Wallist test

```{r kruskall_wallis}
# Vector to hold p-values
p_values <- c()

# Rename column names to make them more consistent
names(colData(mae_sub[[1]])) <- tolower(gsub(" ", "_", names(colData(mae_sub[[1]]))))

# Melt the data
df <- meltAssay(mae_sub[[1]], assay.type = "log10", add_col_data = "treatment_code")

# Set assay and response vairable
assay_name <- "log10"
treatment_code <- "treatment_code"

# Perform Kruskall-Wallis test for each fatty acid
for (name in rownames(mae_sub[[1]])) {
  temp <- df[df$FeatureID == name, ]
  formula <- as.formula(paste0(assay_name, "~", treatment_code))
  p_values <- c(p_values, kruskal.test(formula, temp)$p.value)
}

# Adjusts p-values with false discovery rate method
p_values <- p.adjust(p_values, method = "fdr")

# Create data.frame from p-values data
p_values <- data.frame(fatty_acid = rownames(mae_sub[[1]]), p_value = p_values)

# Order data by p-value in ascending oder
p_values <- p_values[order(p_values$p_value), ]

p_values
```

## MOFA analysis

```{r mofa_fit}
# Rename column names to make them more consistent
names(colData(mae_sub)) <- tolower(gsub(" ", "_", names(colData(mae_sub))))

# Add salmon host mass to colData
merged_coldata <- merge(x = colData(mae_sub), y = colData(mae_sub[[2]])[c("animal", "host.gutted.mass")], all.x = TRUE, by = "animal")
rownames(merged_coldata) <- merged_coldata$animal
colData(mae_sub) <- merged_coldata

# Add mass categories
mass_median <- median(colData(mae_sub)[, "host.gutted.mass"])
colData(mae_sub)["mass_category"] <- ifelse(
  colData(mae_sub)[, "host.gutted.mass"] > mass_median, "heavy", "light")

# Add control vs treatment groups
colData(mae_sub)["treatment_group"] <- ifelse(
  colData(mae_sub)[, "treatment_concentration"] == 0, "control", "treatment")

# Select only the column we require
colData(mae_sub) <- colData(mae_sub)[ , c("treatment_code", treatment_group, "host.gutted.mass", "mass_category"), drop = FALSE]

# Create MOFA model
model <- create_mofa_from_MultiAssayExperiment(
    mae_sub,
    extract_metadata = TRUE
)

# Set model's options
model_opts <- get_default_model_options(model)
model_opts$num_factors <- 5
train_opts <- get_default_training_options(model)

# Change convergence mode to slightly improve accuracy
train_opts$convergence_mode <- "medium"

# Prepare MOFA model
model <- prepare_mofa(
  object = model,
  model_options = model_opts,
  training_options = train_opts
)

# Train model
model <- run_mofa(model, use_basilisk = TRUE)
```

## Pearson correlation between factors

For sanity check, we expect factors to be uncorrelated.

```{r check_ft}
#| fig-width: 10
plot_factor_cor(
  model,
  method = "pearson",
  cl.ratio = 0.2,
  tl.srt = 0,
  title = "Pearson correlation between factors",
  mar=c(0, 0, 2, 0),
)
```
Overall, we do not observe highly correlated factors which is the 

## Visualization

### Variance explained

```{r get_variance}
# Get variance explained
var_explained <- get_variance_explained(model)

# Get total variance explained
var_explained_total <- as.data.frame(
  var_explained$r2_total$group1
)

# Get variance by factor
var_explained_factor <- as.data.frame(var_explained$r2_per_factor$group1)

# Change column names and add view names for clarity
colnames(var_explained_total) <- "var_explained"
var_explained_total["view"] <- rownames(var_explained_total)

colnames(var_explained_factor) <- c("fatty_acids", "metagenomic_assembly")
var_explained_factor["factor"] <- rownames(var_explained_factor)

# Melt dataframe for plotting
var_explained_factor_melt <- melt(
  var_explained_factor,
  id.vars = "factor",
  measure.vars = c("fatty_acids", "metagenomic_assembly"))
```

```{r plot_var_explained_by_view}
ggplot(
  data = var_explained_total,
  aes(x = view, y = var_explained, fill = view)
) +
  geom_bar(stat = "identity") +
  labs(title = "Variance explained by view", x = "View", y = "Variance explained") +
  scale_x_discrete(labels = c("Fatty acids", "Metagenomics")) + # Custom x-axis ticks
  scale_y_continuous(label = c(0, 20, 40, 60, "80%")) + # Custom y-axis ticks
  theme_minimal() +
  theme(
    plot.title.position = "plot", # Align title position with plot
    legend.position = "none"
  )
```

Most of the total variance (85%) is explained by the fatty acid view. We can have
a more granular view and look at variance explained by factor and by view.

```{r plot_variance_explained_by_factor_view}
# Plot
ggplot(
  data = var_explained_factor_melt, aes(x = factor, y = value, fill = variable)
) +
  geom_bar(position = "stack", stat = "identity") +
  labs(
    title = "Variance explained by factor by view",
    x = "", y = "Variance explained",
    fill = "View",
  ) +
  scale_x_discrete(labels = c(paste("Factor", 1:5))) + # Custom x-axis ticks
  scale_y_continuous(label = c(0, 20, 40, "60%")) + # Custom y-axis ticks
  scale_fill_discrete(labels = c("Fatty acids", "Metagenomics")) +
  theme_minimal() +
  theme(
    plot.title.position = "plot" # Align title position with plot
  )
```

The first factor explains variability with fatty acid view, while the only factor that explains variability within metagenomic assembly view is factor 2. Moreover,
within factor 2 metagenomic assembly view explains slightly more variability than
fatty acids (16% and 13% respectively).

## Plot factor

We can now plot single factors. For demonstration purposes, we will focus on
the second factor and color the samples by treatment group (Control vs. Treatment).

```{r plot_factor}
plot_factor(model,
  factors = 2,
  color_by = "treatment_group",
  # group_by = "treatment_group",
  add_violin = TRUE
) +
  labs(fill = "Treatment group") +
  scale_fill_hue(
    labels = c(
      "Control", "Treatment"
    )
  ) +
  labs(y = "Factor 2")
```

We can observer, the the Tiger (control), and Jaguar (2% algae concentration)
have very similar patters with factor values that are concentrated in the lower
part of the violin plots for "heavy" salmons.

## Plot weights

The next step is to have a deeper look inside the observations we found above.
We can plot factor weight that should show us what fatty acids and bacterial
genera have the highest positive or negative impact on the selected factors.

### Plot top weights

It is possible to plot top weight per each view per each factor.

```{r top_weight_visualization, fig.width=8}
custom_plotter <- function(name, factor) {
    p <- plot_top_weights(
        model,
        view = name,
        factors = factor,
        nfeatures = 10
    ) +
    labs(title = paste0("Top weights of the ", name, " assay for factor ", factor))
    return(p)
}

custom_plotter("FATTY ACIDS MG", factor = 1)
custom_plotter("FATTY ACIDS MG", factor = 2)
custom_plotter("FATTY ACIDS MG", factor = 3)
custom_plotter("metagenomic_assembly", factor = 2)
```
If you focus on the first plot, which depicts the top factor weights of the
factor 1 of the fatty acid view,  you will notice that all fatty acids have
negative weights on factor 1. By taking into consideration what we observed on
the factor plot above, we can say that all these acids have lower concentrations
in most of heavy salmons within control (Tiger) and maximum concentration
treatments (Jaguar).

A better view can be offered if we color samples by their individual masses
instead of relying on median. Almost all "heavy" salmons have low concentrations
of the acids seen above.

```{r plot_factor_by_mass}
plot_factor(model,
  factors = 1,
  color_by = "host.gutted.mass",
  group_by = "treatment_code",
)
```

An interesting example comes from an unknown fatty acid 16:4n-3, which exhibits
the diametrically opposed effects in factors 1 and 3 compared to factor 2. 
Specifically, it has the largest effects in factors 2 and 3, in the former case 
the effect is positive, whereas in the latter case it is negative. Conversely, 
it has second most significant negative effect on factor 1.

Similarly, these plots shows us that factors 2 and 3 mostly likely describe two
different treatments, which have the opposite impacts on the concentrations
of fatty acids.

### Plot weights per factor

We can also plot top weights per view for a selection of factors to have a better
overview of the impacts of different features on factors.

```{r weight_visualization2, fig.width=15}
plot_weights(
    model,
    view = 1,
    nfeatures = 8,
    factors = 1:3,
    text_size = 4,
    ) +
    labs(title = "Top 10 weights for the first three factors in fatty acid view") +
  theme(plot.title = element_text(size = 25),
        axis.title.x = element_text(size = 15),
        axis.title.y = element_text(size = 15)
  )
```

These graphs provide us with more high-level overview of the impacts of
the fatty acids on the factors.

We can observe that some fatty acids, such as lignoceric acid, are strongly positively associated with factor 2. Lignoceric acid, however, is negatively associated with factor 3, suggesting  that these factors describe distinct biological processes that underlie
these two factors. Conversely, gamma-linolenic acid has the opposite effects in factor 2 and factor 3. It is negatively associated with factor 2 and positively with factor 3.

Moreover, several other fatty acids differentiate the factors 2 and 3:

1. Nervonic acid (an analog of lignoceric acid)
2. Myristoleic acid
3. Paulinic acid
4. Margaric acid
5. Unknown fatty acid 16:4-3

The factor 1 has two negatively associated fatty acids in common with factor 3:
nervonic and paulinic acids. Most likely, factors 1 and 3 describe two similar underlying processes but it remains to be clarified why only these two acids
are common between the two factors. Finally, one can pose a question of
why factor 3 contains lignoceric and its analog nervonic acids, while only the former
appears in factor 3.

## Plot Factors

### Multiple Factors

We can plot multiple latent factors on a scatter plot.

```{r factor_visualization}
plot_factors(model, factors = c(1, 2, 3), color_by = "treatment_code")
```

It can be noticed that scatter plots between factors 1 and 2, and factors 2 and 3,
display two clusters:

1. The first containing exclusively Tiger (control) and Jaguar (2.0% concentration
of algae, the highest) treatment groups
2. The second containing a mixture of all groups

These plots demonstrate that we need to investigate the first cluster further
because the control and the Jaguar treatment groups might be intuitively expected
to be in two distinct clusters that reflect their opposing treatments.

These clusters are found by a non-linear dimensional reduction technique
Uniform Manifold Approximation and Projection for Dimension Reduction.

## Plot covariation patterns

```{r, fig.width=10}
# Heatmap of relationships between factor and top features
plot_data_heatmap(
    model,
    view = 1,
    factor = 1,
    features = 20,
    cluster_rows = TRUE, cluster_cols = FALSE,
    show_rownames = TRUE, show_colnames = FALSE,
    main = "Heatmap of top 20 fatty acids weight captured by factor 1"
)
```


## Non-linear dimensionality reduction

Finally, we can use trained MOFA model to cluster the samples by using non-linear methods, such as Uniform Manifold Approximation and Projection for Dimension Reduction (UMAP).

### UMAP

```{r umap}
set.seed(142)
model <- run_umap(model)

plot_dimred(
  model,
  method = "UMAP",
  color_by = "treatment_code"
) +
  labs(title = "UMAP plot of MOFA model")
```
As noted, above we also observe the same two clusters, first seen in the 
scatter plots of factors.

## Conclusions

The present case study has demonstrated how easy and fast it is to
download large dataset and transform the data into a MultiAssayExperiment, which
in turn gives the researchers access to an extensive plethora of downstream
tools, such mia and MOFA2 that can be used to pre-process and visualize the
multi-omics data.

```{r session_info}
sessionInfo()
```

