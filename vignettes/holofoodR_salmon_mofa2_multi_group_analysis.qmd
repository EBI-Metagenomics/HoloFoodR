---
title: "ECCB Paper HoloFood Salmon - MOFA2 Analysis"
format: html
---

```{r}
library(mia)
library(MOFA2)
library(reticulate)
library(knitr)
library(patchwork)
library(ggplot2)
# path <- system.file("extdata", "salmon_mae.RDS", package = "HoloFoodR")
# salmon_mae <- readRDS(path)
salmon_mae <- readRDS("../inst/extdata/salmon_mae.RDS")

# Remove NA data from experiments
salmon_mae[[2]] <- salmon_mae[[2]][!is.na(rowData(salmon_mae[[2]])$Phylum), ]

# Fetch only experiments that we need
salmon_mae <-
  salmon_mae[, , c("FATTY ACIDS MG", "metagenomic_assembly")]
```

## Data exploration

```{r}
colData(salmon_mae) |>
  head() |>
  kable()
```

```{r}
# Display columns of MAE object to select those of interest
colData(salmon_mae) |> names()
```

```{r}
# Remove organ-fatty acids row as it only contains a string value "muscle"
fatty_acids_mg_tse <- salmon_mae[["FATTY ACIDS MG"]]
fatty_acids_mg_tse <- fatty_acids_mg_tse[!(rowData(fatty_acids_mg_tse)$marker.name %in% c("Organ-fatty acids"))]
salmon_mae[["FATTY ACIDS MG"]] <- fatty_acids_mg_tse

# Transform matrices to numeric
# If a number is < 0.01, assume it to be 0
fatty_acid_mg_assay <- assay(salmon_mae[["FATTY ACIDS MG"]], "counts")
fatty_acid_mg_assay[fatty_acid_mg_assay == "<0.01"] <- 0
fatty_acid_mg_assay <- apply(fatty_acid_mg_assay, c(1, 2), function(x) as.numeric(gsub(",", ".", x)))

# Reassign assay back to MAE
assay(salmon_mae[["FATTY ACIDS MG"]], "counts") <- fatty_acid_mg_assay
```


```{r}
# Transform fatty acids in mg with log10
salmon_mae[["FATTY ACIDS MG"]] <- transformAssay(
  salmon_mae[["FATTY ACIDS MG"]],
  assay.type = "counts",
  MARGIN = "samples",
  method = "log10",
  pseudocount = TRUE
)

# Transform microbiome with robust centered log-ratio method
salmon_mae[["metagenomic_assembly"]] <- transformAssay(salmon_mae[["metagenomic_assembly"]], method = "relabundance")
salmon_mae[["metagenomic_assembly"]] <- transformAssay(salmon_mae[["metagenomic_assembly"]], assay.type = "relabundance", method = "rclr", pseudocount = TRUE)

# Remove assays that are not needed
assay(salmon_mae[[1]], "counts") <- NULL
assay(salmon_mae[[2]], "counts") <- NULL
assay(salmon_mae[[2]], "relabundance") <- NULL
```

## MOFA analysis

For demonstration purposes, we will focus on finding what experiment (`FATTY
ACIDS MG` or `metagenomic_assembly`) explains most variability between the two
groups within trial A:

1. With 0% concentration of fermented algae meal;
2. With added fermented algae meal.

```{r}
# Select only colData columns of interest
colData(salmon_mae) <- colData(salmon_mae)[, names(colData(salmon_mae)) %in% c("animal", "Treatment code", "Trial code")]

# Filter MAE object to include only Trial A
trial_a <- salmon_mae$`Trial code` == "SA"
salmon_mae <- salmon_mae[, trial_a, ]

# Change column names to more consistent
names(colData(salmon_mae)) <- tolower(gsub(" ", "_", names(colData(salmon_mae))))
```

Treatment code `Tiger` describes treatments without added fermented algae meal (0%),
and the other codes describe different concentrations.

Next step is to create a column to be used a grouping variable for MOFA2.

```{r}
colData(salmon_mae)$added_meal <-
  with(colData(salmon_mae), ifelse(treatment_code == "Tiger", FALSE, TRUE))
```


```{r}
model <- create_mofa_from_MultiAssayExperiment(salmon_mae,
  #                                               groups = "added_meal"
  extract_metadata = TRUE
)
```


```{r}
# Set model's options
model_opts <- get_default_model_options(model)
model_opts$num_factors <- 5

train_opts <- get_default_training_options(model)

# Change convergence mode to slightly improve accuracy
train_opts$convergence_mode <- "slow"

# Prepare MOFA model
model.prepared <- prepare_mofa(
  object = model,
  model_options = model_opts
)

# Train model
model.trained <- run_mofa(model.prepared, use_basilisk = TRUE)
```

```{r}
# Retrieve view names
views_names(model.trained)
```

## Pearson Correlation between Factors

As sanity check, we expect factors to be uncorrelated.

```{r}
plot_factor_cor(
  model.trained,
  method = "pearson"
)
```

Overall, we do not observer highly correlated factors.

## Factor Clustering

It is possible to cluster samples within one or more factors. The latter
allows integration of several sources of variation.

However, this type of clustering does not take into account the importance of
single factors.

```{r}
# Cluster samples from all factors into 3 clusters
clustered_samples <- cluster_samples(
  model.trained,
  k = 3
)
```

## Visualization 

### Variance Explained

```{r, fig.width=15}
plot_list <- plot_variance_explained(model.trained,
  x = "view", y = "factor",
  plot_total = T
)

wrap_plots(plot_list, nrow = 2) +
  plot_annotation(
    title = "Variance Explained per factor and assay",
    theme = theme(plot.title = element_text(hjust = 0.5))
  )
```

The first factor explains most of the variability within the fatty acid
view object while the only factor that explains variability within
metagenomic assembly view is factor 2.

## Plot weights

### Plot top weights

It is possible to plot top weight per each view per each factor.

For demonstration, we will plot the top weights in factor 1 in fatty acid
view and factor 2 in metagenomic assembly view

```{r}
custom_plotter <- function(name, factor) {
  p <- plot_top_weights(model.trained,
    view = name,
    factors = factor,
    nfeatures = 10
  ) +
    labs(title = paste0("Top weights of the ", name, " assay for factor ", factor))
  p
}

custom_plotter("FATTY ACIDS MG", factor = 1)
custom_plotter("metagenomic_assembly", factor = 2)
```

### Plot weights per factor

We can also plot top weights per view for a selection of factors.

```{r, fig.width=18}
plot_weights(model.trained,
  view = 1,
  factors = 1:3,
  text_size = 4
) +
  labs(title = "Top 10 weights for the first three factors in fatty acid view")
```
Next, we can observer that some fatty acids, such as lignoceric acid is strongly
negatively associated with factor 3. This acid, however, is positively associated
with factor 2.

```{r}
plot_weights(model.trained,
  view = 2,
  factors = 1:3,
  text_size = 4
) +
  labs(title = "Top 10 weights for the first three factors in  metagenomic view")
```

## Plot Factors

### Multiple Factors

We can plot multiple latent factors on a scatter plot. For example, the code
below shows a separation of two clusters along factor 3, where in cluster below
only Tiger and Jaguar treatments are present (0% and 2% concentration treatment,
respectively) while all of the rest of treatment codes are present only in the
above cluster.

```{r}
plot_factors(model.trained,
  factors = c(2, 3),
  color_by = "treatment_code"
)
```

### Single Factors

It is also possible to plot single factors.

```{r, fig.width=15}
plot_factor(model.trained,
  factor = 3,
  add_violin = TRUE,
  violin_alpha = 0.25,
  color_by = "treatment_code"
)
```

There does not seem to be any clustering of any treatment codes but the pattern
is identical to the previous scatter plot. However, here we can observer that
most samples are clustered around 0.

## Plot covariation patterns

```{r, fig.width=10}
# Heatmap
plot_data_heatmap(model.trained,
  view = 1,
  factor = 1,
  features = 20,
  cluster_rows = TRUE, cluster_cols = FALSE,
  show_rownames = TRUE, show_colnames = FALSE,
  main = "Heatmap of top 20 fatty acids weight captured by factor 1"
)
```

```{r}
# Scatter plot
plot_data_scatter(model.trained,
  view = 1,
  factor = 1,
  features = 5,
  add_lm = TRUE,
)
```

## Non-linear dimensionality reduction

Finally, we can use trained MOFA model to cluster the samples by using
non-linear methods, such as Uniform Manifold Approximation and Projection for 
Dimension Reduction (UMAP) and t-Distributed Stochastic Neighbor Embedding (t-SNE).

### UMAP

```{r}
set.seed(1)
model.trained <- run_umap(model.trained)

plot_dimred(
  model.trained,
  method = "UMAP",
  color_by = "treatment_code"
) +
  labs(title = "UMAP plot of MOFA model")
```
As before, we can observer two cluster, one of which contains only Tiger and
Jaguar treatments.

### t-SNE

```{r}
set.seed(1)
model.trained <- run_tsne(model.trained)

plot_dimred(
  model.trained,
  method = "TSNE",
  color_by = "treatment_code"
) +
  labs(title = "UMAP plot of MOFA model")
```
