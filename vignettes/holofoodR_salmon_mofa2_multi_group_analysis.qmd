---
title: "ECCB Paper HoloFood Salmon - MOFA2 Analysis"
format: html
---

```{r}
library(mia)
library(MOFA2)
library(reticulate)
library(knitr)
library(patchwork)
library(ggplot2)
# path <- system.file("extdata", "salmon_mae.RDS", package = "HoloFoodR")
# salmon_mae <- readRDS(path)
salmon_mae <- readRDS("../inst/extdata/salmon_mae.RDS")

# Fetch only experiments that we need
salmon_mae <-
  salmon_mae[, ,  c("FATTY ACIDS MG", "metagenomic_assembly")]
```

## Data exploration

```{r}
colData(salmon_mae) |>
  head() |>
  kable()
```

```{r}
# Display columns of MAE object to select those of interest
colData(salmon_mae) |> names()
```

```{r}
# Remove organ-fatty acids row as it only contains a string value "muscle"
fatty_acids_mg_tse <- salmon_mae[["FATTY ACIDS MG"]]
fatty_acids_mg_tse <- fatty_acids_mg_tse[!(rowData(fatty_acids_mg_tse)$marker.name %in% c("Organ-fatty acids"))]
salmon_mae[["FATTY ACIDS MG"]] <- fatty_acids_mg_tse

# Transform matrices to numeric
# If a number is < 0.01, assume it to be 0
fatty_acid_mg_assay <- assay(salmon_mae[["FATTY ACIDS MG"]], "counts")
fatty_acid_mg_assay[fatty_acid_mg_assay == "<0.01"] <- 0
fatty_acid_mg_assay <- apply(fatty_acid_mg_assay, c(1, 2), function(x) as.numeric(gsub(",", ".", x)))

# Reassign assay back to MAE
assay(salmon_mae[["FATTY ACIDS MG"]], "counts") <- fatty_acid_mg_assay
```


```{r}
# Transform fatty acids in mg with log10
salmon_mae[["FATTY ACIDS MG"]] <- transformAssay(
  salmon_mae[["FATTY ACIDS MG"]],
  assay.type = "counts",
  MARGIN = "samples",
  method = "log10",
  pseudocount = TRUE
)

# Transform microbiome with robust centered log-ratio method
salmon_mae[["metagenomic_assembly"]] <- transformAssay(salmon_mae[["metagenomic_assembly"]], method = "relabundance")
salmon_mae[["metagenomic_assembly"]] <- transformAssay(salmon_mae[["metagenomic_assembly"]], assay.type = "relabundance", method = "rclr")

# Remove assays that are not needed
assay(salmon_mae[[1]], "counts") <- NULL
assay(salmon_mae[[2]], "counts") <- NULL
assay(salmon_mae[[2]], "relabundance") <- NULL
```

## MOFA analysis

For demonstration purposes, we will focus on finding what experiment (`FATTY
ACIDS MG` or `metagenomic_assembly`) explains most variability between the two
groups within trial A:

1. With 0% concentration of fermented algae meal;
2. With added fermented algae meal.

```{r}
# Select only colData columns of interest
colData(salmon_mae) <- colData(salmon_mae)[, names(colData(salmon_mae)) %in% c("animal", "Treatment code", "Trial code")]

# Filter MAE object to include only Trial A
trial_a <- salmon_mae$`Trial code` == "SA"
salmon_mae <- salmon_mae[, trial_a, ]

# Change column names to more consistent
names(colData(salmon_mae)) <- tolower(gsub(" ", "_", names(colData(salmon_mae))))
```

Trial code `Tiger` describes trials without added fermented algae meal (0%),
and the other codes describe different concentrations.

Next step is to create a column to be used a grouping variable for MOFA2.

```{r}
colData(salmon_mae)$added_meal <-
  with(colData(salmon_mae), ifelse(treatment_code == "Tiger", FALSE, TRUE))
```


```{r}
model <- create_mofa_from_MultiAssayExperiment(salmon_mae,
                                               group = "added_meal",
                                               extract_metadata = TRUE)
```


```{r}
# Set model's options
model_opts <- get_default_model_options(model)
model_opts$num_factors <- 5

train_opts <- get_default_training_options(model)

# Prepare MOFA model
model.prepared <- prepare_mofa(
  object = model,
  model_options = model_opts
)

# Train model
model.trained <- run_mofa(model.prepared, use_basilisk = TRUE)
```
```{r}
model.trained
```

```{r}
# Retrieve view names
views_names(model.trained)
```


## Pearson Correlation between Factors

As sanity check, we expect factors to be uncorrelated.


```{r}
plot_factor_cor(
  model.trained,
  method = "pearson"
 )
```


## Factor Clustering

It is possible to cluster samples within one or more factors. The latter
allows integration of several sources of variation.

However, this type of clustering does not take into account the importance of
single factors.

```{r}
# Cluster samples from all factors into 5 clusters
clustered_samples <- cluster_samples(
  model.trained,
  k = 5
)
```

## Visualization 

### Variance Explained

```{r, fig.width=15}
plot_list <- plot_variance_explained(model.trained,
                                     x = "view", y = "factor",
                                     plot_total = T)

wrap_plots(plot_list, nrow = 2) +
  plot_annotation(title = "Variance Explained per factor and assay",
                  theme = theme(plot.title = element_text(hjust = 0.5)))
```

```{r}
plot_top_weights(model.trained,
                        view = "FATTY ACIDS MG",
                        factors = 1,
                        nfeatures = 10) +
    labs(title = paste0("Top weights of the ", "FATTY ACID MG", " assay"))
```


```{r}
custom_plotter <- function(name) {
  
  p <- plot_top_weights(model.trained,
                        view = name,
                        factors = "all",
                        nfeatures = 10) +
    labs(title = paste0("Top weights of the ", name, " assay"))
  
}

plot_list <- lapply(c("FATTY ACIDS MG", "metagenomic_assembly"), custom_plotter)

wrap_plots(plot_list, nrow = 2) & theme(text = element_text(size = 8))
```

## Plot Factors

### Single Factors

```{r, fig.width=15}
plot_factor(model.trained,
            groups = c("Tiger", "Neptune"),
            factor = 1:3,
            color_by = "Treatment code",
            add_violin = TRUE,
            violin_alpha = 0.25
)


```

### Combinations of Factors

```{r}
plot_factors(model.trained, 
  factors = 1:3,
  color_by = "Treatment code"
)
```

## Plot Feature Weights

```{r}
plot_weights(model.trained,
  view = "view_0",
  factor = 1,
  nfeatures = 10,     
  scale = TRUE,         
  abs = FALSE            
)
```

```{r}
# Top weights
plot_top_weights(model.trained,
  view = "view_0",
  factor = 1,
  nfeatures = 10
)
```

## Plot covariation patterns

```{r}
# Heatmap
plot_data_heatmap(model,
  view = "view_0",         
  factor = 1,             
  features = 20,
  
  cluster_rows = TRUE, cluster_cols = FALSE,
  show_rownames = TRUE, show_colnames = FALSE
)
```

```{r}
# Scatter plot


plot_data_scatter(model,
  view = "view_1",    
  factor = 1,          
  features = 5,
  add_lm = TRUE,         
  color_by = "Treatment code"
)
```

## Non-linear dimensionality reduction

### Uniform Manifold Approximation and Projection for Dimension Reduction (UMAP)

```{r}
set.seed(1)
model.trained <- run_umap(model.trained)
model.trained <- run_tsne(model.trained)

plot_dimred(
  model.trained,
  method = c("UMAP", "TSNE"),
  group = # trial?/treatment code,
  color_by = "Treatment code"
)
```

```{r}

```

