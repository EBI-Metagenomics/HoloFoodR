---
title: "ECCB Paper HoloFood Salmon - MOFA2 Analysis"
format: html
---

```{r}
library(mia)
library(MOFA2)
library(reticulate)
library(knitr)
library(patchwork)
library(ggplot2)
# path <- system.file("extdata", "salmon_merged_mae.RDS", package = "HoloFoodR")
# salmon_merged_mae <- readRDS(path)
salmon_merged_mae <- readRDS("../inst/extdata/salmon_merged_mae.RDS")

salmon_merged_mae <-
  salmon_merged_mae[, ,  c("FATTY ACIDS MG", "metagenomic_assembly")]

test <- salmon_mae[, ,  c("FATTY ACIDS MG", "IODINE")]
create_mofa_from_MultiAssayExperiment(
  test,
  groups = "Treatment code")

sampleMap(salmon_merged_mae)[sampleMap(salmon_merged_mae)[, "assay"] == "metagenomic_assembly", "colname"] == colnames(as.matrix(
    MultiAssayExperiment::assays(
        salmon_merged_mae)[["metagenomic_assembly"]]))

model <- create_mofa_from_MultiAssayExperiment(salmon_merged_mae,
                                               group = "Treatment.code",)
#                                               extract_metadata = TRUE)

# This check fails
```

```{r}
a <- example(MultiAssayExperiment)
drops(a$value)
a
```


## Data exploration

```{r}
colData(salmon_merged_mae) |>
  head() |>
  kable()
```

```{r}
colData(salmon_merged_mae) |> names()
```

```{r}
salmon_merged_mae[["FATTY ACIDS MG"]] |> colData() |> head()
```

```{r}
# Rename assays in each of experimentList() for more clarity
assayNames(salmon_merged_mae[["FATTY ACIDS MG"]]) <- "fatty_acid_mg"
assayNames(salmon_merged_mae[["FATTY ACIDS PERCENTAGE"]]) <- "fatty_acid_percentage"
assayNames(salmon_merged_mae[["IODINE"]]) <- "iodine"
```

```{r}
# Remove organ-fatty acids row as it only contains a string value "muscle"
fatty_acids_mg_tse <- salmon_merged_mae[["FATTY ACIDS MG"]]
fatty_acids_mg_tse <- fatty_acids_mg_tse[!(rowData(fatty_acids_mg_tse)$marker.name %in% c("Organ-fatty acids"))]
salmon_merged_mae[["FATTY ACIDS MG"]] <- fatty_acids_mg_tse

# Test one row to ensure that it did not change
is_identical <- identical(assay(fatty_acids_mg_tse, "fatty_acid_mg")["Sum 16:1", ], assay(salmon_merged_mae[["FATTY ACIDS MG"]])["Sum 16:1", ])
print(is_identical)

# Transform matrices to numeric
# If a number is < 0.01, I assume it's a 0
fatty_acid_mg_assay <- assay(salmon_merged_mae[["FATTY ACIDS MG"]], "fatty_acid_mg")
fatty_acid_mg_assay[fatty_acid_mg_assay == "<0.01"] <- 0
fatty_acid_mg_assay <- apply(fatty_acid_mg_assay, c(1, 2), function(x) as.numeric(gsub(",", ".", x)))
# fatty_acid_mg_assay <-  matrix(as.numeric(fatty_acid_mg_assay), nrow = nrow(fatty_acid_mg_assay), ncol = ncol(fatty_acid_mg_assay), dimnames = dimnames(fatty_acid_mg_assay))

assay(salmon_merged_mae[["FATTY ACIDS MG"]], "fatty_acid_mg") <- fatty_acid_mg_assay
```


```{r}
# Transform fatty acids in mg with log10
salmon_merged_mae[["FATTY ACIDS MG"]] <- transformAssay(salmon_merged_mae[["FATTY ACIDS MG"]],
                                                        assay.type = "fatty_acid_mg",
                                                        method = "log10",
                                                        pseudocount = 0.01 / 2)
# Transform microbiome with rclr
salmon_merged_mae[["metagenomic_assembly"]] <- transformAssay(salmon_merged_mae[["metagenomic_assembly"]], method = "relabundance")
salmon_merged_mae[["metagenomic_assembly"]] <- transformAssay(salmon_merged_mae[["metagenomic_assembly"]], assay.type = "relabundance", method = "rclr")
```

## MOFA analysis

```{r}
# Remove entries from MAE that do not have animal metadata
# colData(salmon_merged_mae) <- colData(salmon_merged_mae)[!is.na(colData(salmon_merged_mae)[["animal"]]), ]

# We need to add treatment description to colData of the MAE object
# to use it as a grouping variable in MOFA
# fatty_acid_cols_to_merge <- colData(salmon_merged_mae[["FATTY ACIDS MG"]])[c("Treatment description", "animal", "accession")]
# 
# # Get metadata of MAE object
# mae_metadata <- colData(salmon_merged_mae)
# 
# # Merge animal and sample metadata
# merged_metadata <- merge(mae_metadata, fatty_acid_cols_to_merge, all.x = TRUE, by = "accession")
# merged_metadata <- DataFrame(merged_metadata)
# 
# rownames(merged_metadata) <- rownames(fatty_acid_cols_to_merge)

# colData(salmon_merged_mae) <- merged_metadata
# colData(salmon_merged_mae)[["treatment"]] <- fatty_acid_cols_to_merge[["Treatment description"]]
# 
# colData(salmon_merged_mae[["FATTY ACIDS MG"]])["Treatment description"]
# 
# colnames(salmon_merged_mae[["FATTY ACIDS MG"]])
```

```{r}
# Extract Trial letter from Animal code
# colData(salmon_merged_mae)[["Trial code"]] <- substr(colData(salmon_merged_mae)[["Animal code"]], 2, 2)
```


```{r}
# Remove experiments that are not required for the model
salmon_merged_mae_without_assays <- salmon_merged_mae
experiments(salmon_merged_mae_without_assays)[["FATTY ACIDS PERCENTAGE"]] <- NULL
experiments(salmon_merged_mae_without_assays)[["IODINE"]] <- NULL
experiments(salmon_merged_mae_without_assays)[["METABOLOMIC"]] <- NULL
experiments(salmon_merged_mae_without_assays)[["transcriptomic"]] <- NULL
experiments(salmon_merged_mae_without_assays)[["heavy_metals"]] <- NULL
# experiments(salmon_merged_mae_without_assays)[["metagenomic_assembly"]] <- NULL
experiments(salmon_merged_mae_without_assays)[["metatranscriptomic"]] <- NULL
experiments(salmon_merged_mae_without_assays)[["host_genomic"]] <- NULL
experiments(salmon_merged_mae_without_assays)[["metabolomic"]] <- NULL
experiments(salmon_merged_mae_without_assays)[["metagenomic_amplicon"]] <- NULL

# Remove assays that are not required
assay(salmon_merged_mae_without_assays[[1]], "fatty_acid_mg") <- NULL
assay(salmon_merged_mae_without_assays[[2]], "counts") <- NULL
assay(salmon_merged_mae_without_assays[[2]], "relabundance") <- NULL

# assay(salmon_merged_mae_without_assays[["FATTY ACIDS PERCENTAGE"]], "counts") <- NULL
# assay(salmon_merged_mae_without_assays[["IODINE"]], "counts") <- NULL
# assay(salmon_merged_mae_without_assays[["METABOLOMIC"]], "counts") <- NULL

colData(salmon_merged_mae_without_assays) <- colData(salmon_merged_mae_without_assays)[, names(colData(salmon_merged_mae_without_assays)) %in% c("animal", "Treatment.code")]

# Create model from MAE
model <- create_mofa_from_MultiAssayExperiment(salmon_merged_mae_without_assays,
                                               group = "Treatment.code",
                                               extract_metadata = TRUE)
model
```


```{r}
# Set model's options
model_opts <- get_default_model_options(model)
model_opts$num_factors <- 5

train_opts <- get_default_training_options(model)

# Prepare MOFA model
model.prepared <- prepare_mofa(
  object = model,
  model_options = model_opts
)

# Train model
model.trained <- run_mofa(model.prepared, use_basilisk = TRUE)
```
```{r}
model.trained
```

```{r}
# Retrieve view names
views_names(model.trained)
```


## Pearson Correlation between Factors

As sanity check, we expect factors to be uncorrelated.


```{r}
plot_factor_cor(
  model.trained,
  method = "pearson"
 )
```


## Factor Clustering

It is possible to cluster samples within one or more factors. The latter
allows integration of several sources of variation.

However, this type of clustering does not take into account the importance of
single factors.

```{r}
# Cluster samples from all factors into 5 clusters
clustered_samples <- cluster_samples(
  model.trained,
  k = 5
)
```

## Visualization 

### Variance Explained

```{r, fig.width=15}
plot_list <- plot_variance_explained(model.trained,
                                     x = "view", y = "factor",
                                     plot_total = T)

wrap_plots(plot_list, nrow = 2) +
  plot_annotation(title = "Variance Explained per factor and assay",
                  theme = theme(plot.title = element_text(hjust = 0.5)))
```

```{r}
custom_plotter <- function(name) {
  
  p <- plot_top_weights(model.trained,
                        view = name,
                        factors = "all",
                        nfeatures = 10) +
    labs(title = paste0("Top weights of the ", name, " assay"))
  
}

plot_list <- lapply(c("FATTY ACIDS MG", "metagenomic_assembly"), custom_plotter)

wrap_plots(plot_list, nrow = 2) & theme(text = element_text(size = 8))
```

## Plot Factors

### Single Factors

```{r, fig.width=15}
plot_factor(model.trained,
            groups = c("Tiger", "Neptune"),
            factor = 1:3,
            color_by = "Treatment code",
            add_violin = TRUE,
            violin_alpha = 0.25
)


```

### Combinations of Factors

```{r}
plot_factors(model.trained, 
  factors = 1:3,
  color_by = "Treatment code"
)
```

## Plot Feature Weights

```{r}
plot_weights(model.trained,
  view = "view_0",
  factor = 1,
  nfeatures = 10,     
  scale = TRUE,         
  abs = FALSE            
)
```

```{r}
# Top weights
plot_top_weights(model.trained,
  view = "view_0",
  factor = 1,
  nfeatures = 10
)
```

## Plot covariation patterns

```{r}
# Heatmap
plot_data_heatmap(model,
  view = "view_0",         
  factor = 1,             
  features = 20,
  
  cluster_rows = TRUE, cluster_cols = FALSE,
  show_rownames = TRUE, show_colnames = FALSE
)
```

```{r}
# Scatter plot


plot_data_scatter(model,
  view = "view_1",    
  factor = 1,          
  features = 5,
  add_lm = TRUE,         
  color_by = "Treatment code"
)
```

## Non-linear dimensionality reduction

### Uniform Manifold Approximation and Projection for Dimension Reduction (UMAP)

```{r}
set.seed(1)
model.trained <- run_umap(model.trained)
model.trained <- run_tsne(model.trained)

plot_dimred(
  model.trained,
  method = c("UMAP", "TSNE"),
  group = # trial?/treatment code,
  color_by = "Treatment code"
)
```

