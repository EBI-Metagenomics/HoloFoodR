---
title: "ECCB Paper - Salmon"
format: html
---

```{r}
library(HoloFoodR)
library(MGnifyR)
library(TreeSummarizedExperiment)
library(reprex)
library(dplyr)
library(knitr)

# Get salmon samples
salmons <- HoloFoodR::doQuery("animals", system = "salmon", use.cache = TRUE, cache.dir = "../.HoloFoodR_cache/salmon_query/")

# Get only salmon metagenomic and metabolomic data
salmons_metagenomic_metabolomic <- salmons |>
  filter(metabolomic == TRUE & metagenomic_assembly == TRUE)

# Get only salmon samples that include metagenomic assemblies

```

```{r}
# Get salmon data
salmon_data <- HoloFoodR::getData(
  accession.type = "animals",
  accession = salmons_metagenomic_metabolomic[["accession"]],
  use.cache = TRUE,
  cache.dir = "../.HoloFoodR_cache/salmon_data/"
)

# Get salmon samples
salmon_samples <- salmon_data[["samples"]]
```

```{r}
salmon_sample_ids <- unique(salmon_samples[["accession"]])
```

```{r}
salmon_mae <- HoloFoodR::getResult(
  salmon_sample_ids,
  use.cache = TRUE,
  cache.dir = "../.HoloFoodR_cache/salmon_results/"
)
```

```{r}
# Fetch available salmon experiments
experiments(salmon_mae)
```

```{r}
# Fetch FATTY ACIDS AG TreeSummarizedExperiment
fatty_acids_mg_tse <- getWithColData(salmon_mae, "FATTY ACIDS MG")

assay(fatty_acids_mg_tse, "counts", withDimnames = TRUE)[0:10, ] |> kable("pipe")
```
We have quite a lot of data for fatty acids concentrations in `mg/g`,
for example, https://www.holofooddata.org/sample/SAMEA112950847.

Same with percentages:

```{r}
# Fetch FATTY ACIDS PERCENTAGE TreeSummarizedExperiment
fatty_acids_percentage_tse <- getWithColData(salmon_mae, "FATTY ACIDS PERCENTAGE")

assay(fatty_acids_percentage_tse, "counts", withDimnames = TRUE)[0:10, ] |> kable("pipe")
```

Now we can fetch metagenomic data.

```{r}
mg_salmon <- MgnifyClient(
  useCache = TRUE,
  cacheDir = "../.MGnifyR_cache/"
  )

metagenomic_salmon_samples <- salmon_samples[
    salmon_samples[["sample_type"]] == "metagenomic_assembly", ]

# Search for 410 sample IDs in MGnify database
salmon_analysis_ids <- searchAnalysis(
  mg_salmon,
  type = "samples",
  metagenomic_salmon_samples[["accession"]]
)
# We only find 393 accession IDs
```
```{r}
head(salmon_analysis_ids)
```

```{r}
# Get MAE metagenomic taxonomic data for salmon from MGnify
salmon_metagenomic_tse <- MGnifyR::getResult(
  mg_salmon,
  get.func = FALSE,
  salmon_analysis_ids)
# And we only get 392 results by querying 393 salmon_analysis_ids

# salmon_metagenomic_mae <- MGnifyR::getResult(
#   mg_salmon,
#   salmon_analysis_ids)
```

```{r}
# Get experiments of salmon metagenomic data
# salmon_experiments <- experiments(salmon_metagenomic_mae)

# Convert analysis names to sample names
salmon_sample_id <-
  names(salmon_analysis_ids)[
    match(
      colnames(salmon_metagenomic_tse),
      salmon_analysis_ids
    )
  ]

# Before assigning colnames to MAE object,
# their ids are analysis like MGYA00606450
# salmon_analysis_ids containers these ids
# as a character vector
# SAMEA7688025   SAMEA7687961 
# "MGYA00606450" "MGYA00606358"
# We need to change colnames of salmon_metagenomic_mae to these ids
colnames(salmon_metagenomic_tse) <- salmon_sample_id

# Test with merging by row.names
# Do inner join
colData(salmon_metagenomic_tse)$accession <- rownames(colData(salmon_metagenomic_tse))
metagenomic_tse_coldata <- colData(salmon_metagenomic_tse)
salmon_metadata <- colData(salmon_mae[["metagenomic_assembly"]])
# Performing inner join
merged_coldata <- merge(
  metagenomic_tse_coldata,
  salmon_metadata,
  by = "accession",
  all = FALSE
)
# Add rownames to merged data
rownames(merged_coldata) <- merged_coldata$accession
# Assign merged data to TSE object
colData(salmon_metagenomic_tse) <- merged_coldata
  
# colData(salmon_metagenomic_tse) <- merge(
#   colData(salmon_mae[["metagenomic_assembly"]]), colData(salmon_metagenomic_tse),
#   by = "accession", all = FALSE
# )
# rownames(colData(salmon_metagenomic_tse)) <- colData(salmon_metagenomic_tse)$Row.names

#rownames(merged_coldata) <- merged_coldata$Row.names
#colData(salmon_metagenomic_tse) <- merged_coldata

# Add salmon sample accession numbers from Holofood
#colData(salmon_metagenomic_mae)@listData$accession <- salmon_sample_id

# Build MAE experiment from TSE
# salmon_metagenomic_mae <- MultiAssayExperiment(
#   experiments = list("METAGENOMIC COUNTS" = salmon_metagenomic_tse),
#   colData = colData(salmon_metagenomic_tse)
# )

# Merge HoloFood and MGnify MultiAssayExperiment objects
# salmon_mae[["METAGENOME"]] <- salmon_metagenomic_mae
# salmon_merged_mae <- c(experiments(salmon_mae), salmon_mae)

# There are 392 colNames in salmon_metagenomic_mae
# and 410 in each experiment of salmon_mae
# I need to filter the salmon_mae object to
# only have matching colname() entries in TSE and MAE
#match(colnames(salmon_mae[["FATTY ACIDS MG"]]), colnames(salmon_metagenomic_mae))

# Add accession values from rownames to column names to merge on
# Full join with by row.names does not keep all 410 rows
# of colData of salmon_mae object
# However, MGnify only find 392 accessions, thus when setting colData(colData(salmon_metagenomic_mae)), R complains about the discrepancies
# in the number of rows


# rownames(merged_coldata) <- merged_coldata$Row.names

# colData(salmon_mae[["metagenomic_assembly"]])$accession <- rownames(colData(salmon_mae[["metagenomic_assembly"]]))
# colData(salmon_metagenomic_mae)$accession <-
#   rownames(colData(salmon_metagenomic_mae))
# # Before adding MGnify data to MAE object, we can add appropriate colData from
# # metagenomic_assemply MAE experiment to it
# merged_coldata <- merge(
#   colData(salmon_mae[["metagenomic_assembly"]]), colData(salmon_metagenomic_mae),
#   by = "accession", all = TRUE
# )
# # Set rownames of merged colData
# rownames(merged_coldata) <- merged_coldata$accession

# Extract treatment codes like Mars, Venus, Tiger in a separate column
# merged_coldata$treatment.code <- sub(":.*", "", merged_coldata$`host diet treatment`)

# Set colData of salmon metagenomic counts to merged colData
# colData(salmon_metagenomic_mae) <- merged_coldata

# Merge MAE objects
# This merging messes up mapping of sample accession numbers to their
# treatment codes
# The correct treatment codes can extracted from the
# host.diet.treatment.y column
salmon_merged_mae <- c(
  salmon_mae,
  METAGENOMIC_COUNTS = salmon_metagenomic_tse
)
salmon_merged_mae <- MultiAssayExperiment(salmon_merged_mae)

# Get sample names from MAE
all_samples <- unique(unlist(colnames(salmon_merged_mae)))
```

```{r}
# Create metagenomic count map following example on
# https://bioconductor.org/packages/release/bioc/vignettes/MultiAssayExperiment/inst/doc/MultiAssayExperiment.html#creation-of-the-multiassayexperiment-class-object

(metagenomic_map <- data.frame(primary=rownames(colData(salmon_merged_mae$metagenomic_assembly)),
                       colname=colnames(salmon_merged_mae$metagenomic_assembly),
                       stringsAsFactors = FALSE))

listmap <- list(metagenomic_map)
names(listmap) <- c("metagenomic_counts")

# Convert list of dataframes to sampleMap
dfmap <- listToMap(listmap)

# Create list of objects for 
objlist <- list(
  "FATTY ACIDS MG" = salmon_merged_mae$`FATTY ACIDS MG`,
  "metagenomic_counts" = salmon_merged_mae$`METAGENOMIC COUNTS`
)

# Get animal metadata from one of 
animal.data <- colData(salmon_merged_mae$metagenomic_assembly)@listData |> as.data.frame()

myMultiAssay <- MultiAssayExperiment(objlist, animal.data, dfmap)
myMultiAssay

# salmon_merged_mae <- c(experiments(salmon_mae), experiments(salmon_metagenomic_mae))
salmon_merged_mae <- MultiAssayExperiment(salmon_merged_mae, colData = colData(salmon_merged_mae$`FATTY ACIDS MG`))

# Save to RDS
saveRDS(object = salmon_merged_mae, file = "../inst/extdata/salmon_merged_mae.RDS")
```

```{r}
exprss1 <- matrix(rnorm(16), ncol = 4,
        dimnames = list(sprintf("ENST00000%i", sample(288754:290000, 4)),
                c("Jack", "Jill", "Bob", "Bobby")))
exprss2 <- matrix(rnorm(12), ncol = 3,
        dimnames = list(sprintf("ENST00000%i", sample(288754:290000, 4)),
                c("Jack", "Jane", "Bob")))
doubleExp <- list("methyl 2k"  = exprss1, "methyl 3k" = exprss2)
simpleMultiAssay <- MultiAssayExperiment(experiments=doubleExp)
simpleMultiAssay
```


## Fetch samples

We can also fetch samples instead of animals from Holofood database.

```{r}
# We can also fetch samples instead of animals
samples <- HoloFoodR::doQuery("samples", use.cache = TRUE, cache.dir = "../.HoloFoodR_cache/salmon_query/", system = "salmon")

# Get SAMPLE data
sample_data <- HoloFoodR::getData(
  accession.type = "samples",
  accession = samples[["accession"]],
  use.cache = TRUE,
  cache.dir = "../.HoloFoodR_cache/salmon_data/"
)

# Sample data as data.frame
sample_data_flat <- HoloFoodR::getData(
  accession.type = "samples",
  accession = samples[["accession"]],
  flatten = TRUE,
  use.cache = TRUE,
  cache.dir = "../.HoloFoodR_cache/salmon_data/"
)

# We can filter sample_data to get the results only
# on metagenomic_assembly, fatty_acids, heavy_metals, iodine,
# and metabolomic sample types
# sample_filter <- sample_data_flat[["sample_type"]] %in%
#   c(
#     "metagenomic_assembly",
#     "fatty_acids",
#     "heavy_metals",
#     "iodine",
#     "metabolomic"
#   )
# 
# # Fetch 5 sample types from HoloFood
# sample_filtered_sample_ids <- unique(sample_data_flat[filter, ]$accession)
```

```{r}
# # Get data on 5 sample types specified above
# sample_filtered_mae <- HoloFoodR::getResult(
#   sample_filtered_sample_ids,
#   use.cache = TRUE,
#   cache.dir = ".HoloFoodR_cache/salmon_results/"
# )

sample_ids <- unique(sample_data[["accession"]][["accession"]])

# Get data on all samples
sample_mae <- HoloFoodR::getResult(
  sample_ids,
  use.cache = TRUE,
  cache.dir = "../.HoloFoodR_cache/salmon_results/"
)
```

## Add MGnify data to samples

```{r}
mg_sample_salmon <- MgnifyClient(useCache = TRUE)

# Extract sample type dataframe from sample_data
sample_types <- sample_data[["sample_type"]]

# Fetch only metagenomic samples for MGnify
metagenomic_samples <- sample_types[sample_types[["sample_type"]] == "metagenomic_assembly", ]
```

```{r}
sample_analysis_ids <-
  MGnifyR::searchAnalysis(
    mg_sample_salmon,
    type = "samples",
    
  )
```

