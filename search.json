[{"path":"/articles/HoloFoodR.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"HoloFoodR: interface to HoloFoodR database","text":"HoloFoodR package designed ease access EBI’s HoloFoodR resource, allowing searching retrieval multiple datasets downstream analysis. HoloFood database encompass metagenomics data; however, data stored within MGnify database. packages offer analogous functionalities, streamlining integration data enhancing accessibility. TreeSummarizedExperiment","code":""},{"path":"/articles/HoloFoodR.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"HoloFoodR: interface to HoloFoodR database","text":"HoloFoodR hosted Bioconductor, can installed using via BiocManager.","code":"BiocManager::install(\"HoloFoodR\")"},{"path":"/articles/HoloFoodR.html","id":"load-the-package","dir":"Articles","previous_headings":"","what":"Load the package","title":"HoloFoodR: interface to HoloFoodR database","text":"installed, HoloFoodR made available usual way.","code":"library(HoloFoodR) #> Loading required package: TreeSummarizedExperiment #> Loading required package: SingleCellExperiment #> Loading required package: SummarizedExperiment #> Loading required package: MatrixGenerics #> Loading required package: matrixStats #>  #> Attaching package: 'MatrixGenerics' #> The following objects are masked from 'package:matrixStats': #>  #>     colAlls, colAnyNAs, colAnys, colAvgsPerRowSet, colCollapse, #>     colCounts, colCummaxs, colCummins, colCumprods, colCumsums, #>     colDiffs, colIQRDiffs, colIQRs, colLogSumExps, colMadDiffs, #>     colMads, colMaxs, colMeans2, colMedians, colMins, colOrderStats, #>     colProds, colQuantiles, colRanges, colRanks, colSdDiffs, colSds, #>     colSums2, colTabulates, colVarDiffs, colVars, colWeightedMads, #>     colWeightedMeans, colWeightedMedians, colWeightedSds, #>     colWeightedVars, rowAlls, rowAnyNAs, rowAnys, rowAvgsPerColSet, #>     rowCollapse, rowCounts, rowCummaxs, rowCummins, rowCumprods, #>     rowCumsums, rowDiffs, rowIQRDiffs, rowIQRs, rowLogSumExps, #>     rowMadDiffs, rowMads, rowMaxs, rowMeans2, rowMedians, rowMins, #>     rowOrderStats, rowProds, rowQuantiles, rowRanges, rowRanks, #>     rowSdDiffs, rowSds, rowSums2, rowTabulates, rowVarDiffs, rowVars, #>     rowWeightedMads, rowWeightedMeans, rowWeightedMedians, #>     rowWeightedSds, rowWeightedVars #> Loading required package: GenomicRanges #> Loading required package: stats4 #> Loading required package: BiocGenerics #>  #> Attaching package: 'BiocGenerics' #> The following objects are masked from 'package:stats': #>  #>     IQR, mad, sd, var, xtabs #> The following objects are masked from 'package:base': #>  #>     anyDuplicated, aperm, append, as.data.frame, basename, cbind, #>     colnames, dirname, do.call, duplicated, eval, evalq, Filter, Find, #>     get, grep, grepl, intersect, is.unsorted, lapply, Map, mapply, #>     match, mget, order, paste, pmax, pmax.int, pmin, pmin.int, #>     Position, rank, rbind, Reduce, rownames, sapply, setdiff, table, #>     tapply, union, unique, unsplit, which.max, which.min #> Loading required package: S4Vectors #>  #> Attaching package: 'S4Vectors' #> The following object is masked from 'package:utils': #>  #>     findMatches #> The following objects are masked from 'package:base': #>  #>     expand.grid, I, unname #> Loading required package: IRanges #> Loading required package: GenomeInfoDb #> Loading required package: Biobase #> Welcome to Bioconductor #>  #>     Vignettes contain introductory material; view with #>     'browseVignettes()'. To cite Bioconductor, see #>     'citation(\"Biobase\")', and for packages 'citation(\"pkgname\")'. #>  #> Attaching package: 'Biobase' #> The following object is masked from 'package:MatrixGenerics': #>  #>     rowMedians #> The following objects are masked from 'package:matrixStats': #>  #>     anyMissing, rowMedians #> Loading required package: Biostrings #> Loading required package: XVector #>  #> Attaching package: 'Biostrings' #> The following object is masked from 'package:base': #>  #>     strsplit #> Loading required package: MultiAssayExperiment"},{"path":"/articles/HoloFoodR.html","id":"functionalities","dir":"Articles","previous_headings":"","what":"Functionalities","title":"HoloFoodR: interface to HoloFoodR database","text":"HoloFoodR offers three functions doQuery(), getResult() getData() can utilized search fetch data HoloFood database. tutorial, demonstrate search animals, subset animals based whether specific sample type, finally fetch data samples. Note can done doQuery() getResult() (getData() getResult()) utilizing query filters. tutorial demonstrating functionality package. Additionally, package includes getMetaboLights() function can utilized retrieve metabolomic data MetaboLights database.","code":""},{"path":"/articles/HoloFoodR.html","id":"search-data","dir":"Articles","previous_headings":"Functionalities","what":"Search data","title":"HoloFoodR: interface to HoloFoodR database","text":"search animals, genome catalogues, samples viral catalogues, can use doQuery() function. can also use getData() doQuery() optimized searching datatypes. example, instead nested list sample types doQuery() returns sample types presence/absence table convenient. search animals, subset based whether include histological samples. Note can done also using query filters. doQuery() returns data.frame including information type data searched.","code":"animals <- doQuery(\"animals\", max.hits = 100) animals <- animals[ animals[[\"histological\"]], ]  colnames(animals) |> head() #> [1] \"accession\"            \"system\"               \"canonical_url\"        #> [4] \"histological\"         \"host_genomic\"         \"inflammatory_markers\""},{"path":"/articles/HoloFoodR.html","id":"get-data","dir":"Articles","previous_headings":"Functionalities","what":"Get data","title":"HoloFoodR: interface to HoloFoodR database","text":"Now information animal histological samples. Let’s get data animals know sample IDs fetch. returned value getData() function list. can data also data.frame specify flatten = TRUE. data information animals including samples drawn . elements list data.frames. example, “samples” table contains information samples drawn animals specified input. Now can collect sample IDs.","code":"animal_data <- getData(     accession.type = \"animals\", accession = animals[[\"accession\"]]) samples <- animal_data[[\"samples\"]]  colnames(samples) |> head() #> [1] \"accession\"        \"title\"            \"sample_type\"      \"animal\"           #> [5] \"canonical_url\"    \"metagenomics_url\" sample_ids <- unique(samples[[\"accession\"]])"},{"path":"/articles/HoloFoodR.html","id":"get-data-on-samples","dir":"Articles","previous_headings":"Functionalities","what":"Get data on samples","title":"HoloFoodR: interface to HoloFoodR database","text":"get data samples, can utilize getResult() function. returns data MultiAssayExperiment (MAE) format. MAE object stores individual omics TreeSummarizedExperiment (TreeSE) objects. TreeSE, column represents sample rows represent features.","code":"mae <- getResult(sample_ids) #> Warning: Data for the following samples cannot be found. The sample types are metagenomic_assembly, host_genomic, transcriptomic and metatranscriptomic. (Note that metagenomic assemblies can be found from the MGnify database. See MGnifyR package.): #> 'SAMEA10130025', 'SAMEA13389405', 'SAMEA13389406', 'SAMEA13901590', 'SAMEA13901591', 'SAMEA13929779', 'SAMEA7697591', 'SAMEA10130091', 'SAMEA13389692', 'SAMEA13389693', 'SAMEA13901708', 'SAMEA7571845', 'SAMEA10158030', 'SAMEA13389419', 'SAMEA13389420', 'SAMEA13901594', 'SAMEA13901595', 'SAMEA13929781', 'SAMEA7697592', 'SAMEA10130039', 'SAMEA13389496', 'SAMEA13389497', 'SAMEA13901618', 'SAMEA13901619', 'SAMEA13929785', 'SAMEA7571815', 'SAMEA10130112', 'SAMEA13389794', 'SAMEA13389795', 'SAMEA13901758', 'SAMEA13901759', 'SAMEA13929811', 'SAMEA7571864', 'SAMEA10158022', 'SAMEA13389146', 'SAMEA13389147', 'SAMEA13901511', 'SAMEA13901512', 'SAMEA13929767', 'SAMEA7571777', 'SAMEA10130019', 'SAMEA13389353', 'SAMEA13389354', 'SAMEA13389355', 'SAMEA13901574', 'SAMEA13901575', 'SAMEA14095991', 'SAMEA7722475', 'SAMEA10130101', 'SAMEA13389738', 'SAMEA13389739', 'SAMEA13901730', 'SAMEA13901731', 'SAMEA13929802', 'SAMEA7571856', 'SAMEA10455480', 'SAMEA13389220', 'SAMEA10129993', 'SAMEA13389183', 'SAMEA13389184', 'SAMEA13901520', 'SAMEA13901521', 'SAMEA7697579', 'SAMEA10130017', 'SAMEA13389345', 'SAMEA13389346', 'SAMEA13901571', 'SAMEA13901572', 'SAMEA13929772', 'SAMEA7571801', 'SAMEA10130113', 'SAMEA13389807', 'SAMEA13389808', 'SAMEA13901762', 'SAMEA13901763', 'SAMEA13929813', 'SAMEA7571866', 'SAMEA10455481', 'SAMEA13389227', 'SAMEA10455479', 'SAMEA13389169', 'SAMEA10130020', 'SAMEA13389357', 'SAMEA13389358', 'SAMEA13901576', 'SAMEA13901577', 'SAMEA13929773', 'SAMEA7697587', 'SAMEA10130100', 'SAMEA13389734', 'SAMEA13389735', 'SAMEA13901728', 'SAMEA13901729', 'SAMEA13929801', 'SAMEA7697622', 'SAMEA10130016', 'SAMEA13389342', 'SAMEA13389343', 'SAMEA13901569', 'SAMEA13901570', 'SAMEA13929771', 'SAMEA7571800', 'SAMEA10130040', 'SAMEA13389503', 'SAMEA13389504', 'SAMEA13901620', 'SAMEA13901621', 'SAMEA13929786', 'SAMEA7571816', 'SAMEA10129979', 'SAMEA13389081', 'SAMEA13389082', 'SAMEA13901489', 'SAMEA13901490', 'SAMEA7571769', 'SAMEA10130002', 'SAMEA13389243', 'SAMEA13389244', 'SAMEA13901540', 'SAMEA13901541', 'SAMEA7697582', 'SAMEA10129985', 'SAMEA13389133', 'SAMEA13389134', 'SAMEA13901505', 'SAMEA13901506', 'SAMEA13929764', 'SAMEA7571775', 'SAMEA10455476', 'SAMEA13389110', 'SAMEA10130031', 'SAMEA13389443', 'SAMEA13389444', 'SAMEA13901602', 'SAMEA13901603', 'SAMEA7571811', 'SAMEA10130023', 'SAMEA13389395', 'SAMEA13389396', 'SAMEA13901586', 'SAMEA13901587', 'SAMEA13929777', 'SAMEA7571806', 'SAMEA10130090', 'SAMEA13389687', 'SAMEA13389688', 'SAMEA13901707', 'SAMEA7571844', 'SAMEA10130119', 'SAMEA13389832', 'SAMEA13389833', 'SAMEA13901773', 'SAMEA13929818', 'SAMEA7697633', 'SAMEA10129996', 'SAMEA13389204', 'SAMEA13389205', 'SAMEA13901529', 'SAMEA13901530', 'SAMEA7697580', 'SAMEA10130088', 'SAMEA13389677', 'SAMEA13389678', 'SAMEA13901704', 'SAMEA13929799', 'SAMEA7571843' mae #> A MultiAssayExperiment object of 8 listed #>  experiments with user-defined names and respective classes. #>  Containing an ExperimentList class object of length 8: #>  [1] BIOGENIC AMINES: TreeSummarizedExperiment with 7 rows and 35 columns #>  [2] FATTY ACIDS: TreeSummarizedExperiment with 19 rows and 57 columns #>  [3] HISTOLOGY: TreeSummarizedExperiment with 20 rows and 57 columns #>  [4] INFLAMMATORY MARKERS: TreeSummarizedExperiment with 14 rows and 58 columns #>  [5] metagenomic_assembly: TreeSummarizedExperiment with 0 rows and 53 columns #>  [6] host_genomic: TreeSummarizedExperiment with 0 rows and 53 columns #>  [7] transcriptomic: TreeSummarizedExperiment with 0 rows and 44 columns #>  [8] metatranscriptomic: TreeSummarizedExperiment with 0 rows and 16 columns #> Functionality: #>  experiments() - obtain the ExperimentList instance #>  colData() - the primary/phenotype DataFrame #>  sampleMap() - the sample coordination DataFrame #>  `$`, `[`, `[[` - extract colData columns, subset, or experiment #>  *Format() - convert into a long or wide DataFrame #>  assays() - convert ExperimentList to a SimpleList of matrices #>  exportClass() - save data to flat files mae[[1]] #> class: TreeSummarizedExperiment  #> dim: 7 35  #> metadata(0): #> assays(1): counts #> rownames(7): Cadaverin Gesamtamine (Total biogenic amines) ... Spermin #>   Tyramin #> rowData names(4): marker.name marker.type marker.canonical_url units #> colnames(35): SAMEA112906114 SAMEA112906592 ... SAMEA112906002 #>   SAMEA112906785 #> colData names(13): accession sample_type ... Project Sample code #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0): #> rowLinks: NULL #> rowTree: NULL #> colLinks: NULL #> colTree: NULL"},{"path":"/articles/HoloFoodR.html","id":"incorporate-with-mgnify-data","dir":"Articles","previous_headings":"Functionalities","what":"Incorporate with MGnify data","title":"HoloFoodR: interface to HoloFoodR database","text":"MGnifyR package can utilized fetch metagenomics data MGnify database. MGnifyR package, can use MGnifyR::searchAnalysis() function search analyses based sample IDs . can fetch data based accession IDs. MGnifyR::getResult() returns MAE object just like HoloFoodR. However, metagenomic data points individual analyses instead samples. can harmonize data replacing analysis IDs sample IDs, can combine data single MAE. Now, MAE object linking samples various omics together, compatibility ensured single omics datasets (Tree)SummarizedExperiment format. compatibility allows us harness cutting-edge downstream analytics tools like miaverse framework support data containers seamlessly.","code":"library(MGnifyR)  mg <- MgnifyClient(useCache = TRUE)  # Get those samples that are metagenomic samples metagenomic_samples <- samples[     samples[[\"sample_type\"]] == \"metagenomic_assembly\", ]  # Get analysis IDs based on sample IDs analysis_ids <- searchAnalysis(     mg, type = \"samples\", metagenomic_samples[[\"accession\"]]) head(analysis_ids) #>  SAMEA10130025   SAMEA7697591  SAMEA10130091   SAMEA7571845  SAMEA10158030  #> \"MGYA00606535\" \"MGYA00616692\" \"MGYA00606528\" \"MGYA00616689\" \"MGYA00606518\"  #>   SAMEA7697592  #> \"MGYA00615947\" mae_metagenomic <- MGnifyR::getResult(mg, analysis_ids) mae_metagenomic #> A MultiAssayExperiment object of 6 listed #>  experiments with user-defined names and respective classes. #>  Containing an ExperimentList class object of length 6: #>  [1] microbiota: TreeSummarizedExperiment with 675 rows and 52 columns #>  [2] go-slim: TreeSummarizedExperiment with 116 rows and 52 columns #>  [3] go-terms: TreeSummarizedExperiment with 3264 rows and 52 columns #>  [4] interpro-identifiers: TreeSummarizedExperiment with 19681 rows and 52 columns #>  [5] taxonomy: TreeSummarizedExperiment with 1438 rows and 52 columns #>  [6] taxonomy-lsu: TreeSummarizedExperiment with 1856 rows and 52 columns #> Functionality: #>  experiments() - obtain the ExperimentList instance #>  colData() - the primary/phenotype DataFrame #>  sampleMap() - the sample coordination DataFrame #>  `$`, `[`, `[[` - extract colData columns, subset, or experiment #>  *Format() - convert into a long or wide DataFrame #>  assays() - convert ExperimentList to a SimpleList of matrices #>  exportClass() - save data to flat files # Get experiments from metagenomic data exps <- experiments(mae_metagenomic) # Convert analysis names to sample names exps <- lapply(exps, function(x){     # Get corresponding sample ID     sample_id <- names(analysis_ids)[ match(colnames(x), analysis_ids) ]     # Replace analysis ID with sample ID     colnames(x) <- sample_id     return(x) })  # Add to original MultiAssayExperiment mae <- c(experiments(mae), exps) mae"},{"path":"/articles/HoloFoodR.html","id":"extra-get-data-from-metabolights-database","dir":"Articles","previous_headings":"Functionalities","what":"Extra: Get data from MetaboLights database","title":"HoloFoodR: interface to HoloFoodR database","text":"HoloFood database exclusively contains targeted metabolomic data. However, provides URL addresses linking MetaboLights database, untargeted metabolomics data can accessed. retrieve data, can utilize getMetaboLights() function retrieve information available data. Moreover, returns processed metabolomic data (processed data, can also use getReturn(x, get.metabolomic=TRUE)). , retrieve metabolomic data associated HoloFood. result list includes three data.frames: spectra data, can either fetch files using getMetaboLightsFile(), follow vignette guidance loading data directly object, tailored metabolomics spectra data.","code":"# Get untargeted metabolomic samples samples <- doQuery(\"samples\", sample_type = \"metabolomic\") # Get the data metabolomic <- getMetaboLights(samples[[\"metabolomics_url\"]])  # Show names of data.frames names(metabolomic) - study metadata - assay metadata - assay that includes abundance table and feature metadata"},{"path":"/articles/HoloFoodR.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"HoloFoodR: interface to HoloFoodR database","text":"","code":"sessionInfo() #> R version 4.4.1 (2024-06-14) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 22.04.4 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    #>  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] HoloFoodR_0.99.9                MultiAssayExperiment_1.31.5     #>  [3] TreeSummarizedExperiment_2.13.0 Biostrings_2.73.1               #>  [5] XVector_0.45.0                  SingleCellExperiment_1.27.2     #>  [7] SummarizedExperiment_1.35.1     Biobase_2.65.1                  #>  [9] GenomicRanges_1.57.1            GenomeInfoDb_1.41.1             #> [11] IRanges_2.39.2                  S4Vectors_0.43.2                #> [13] BiocGenerics_0.51.1             MatrixGenerics_1.17.0           #> [15] matrixStats_1.4.1               knitr_1.48                      #> [17] BiocStyle_2.33.1                #>  #> loaded via a namespace (and not attached): #>  [1] httr2_1.0.4             xfun_0.47               bslib_0.8.0             #>  [4] htmlwidgets_1.6.4       lattice_0.22-6          yulab.utils_0.1.7       #>  [7] vctrs_0.6.5             tools_4.4.1             generics_0.1.3          #> [10] curl_5.2.3              parallel_4.4.1          tibble_3.2.1            #> [13] fansi_1.0.6             BiocBaseUtils_1.7.3     pkgconfig_2.0.3         #> [16] Matrix_1.7-0            desc_1.4.3              lifecycle_1.0.4         #> [19] GenomeInfoDbData_1.2.12 compiler_4.4.1          treeio_1.29.1           #> [22] textshaping_0.4.0       codetools_0.2-20        htmltools_0.5.8.1       #> [25] sass_0.4.9              lazyeval_0.2.2          yaml_2.3.10             #> [28] tidyr_1.3.1             pkgdown_2.1.1           pillar_1.9.0            #> [31] crayon_1.5.3            jquerylib_0.1.4         BiocParallel_1.39.0     #> [34] DelayedArray_0.31.11    cachem_1.1.0            abind_1.4-8             #> [37] nlme_3.1-166            tidyselect_1.2.1        digest_0.6.37           #> [40] purrr_1.0.2             dplyr_1.1.4             bookdown_0.40           #> [43] fastmap_1.2.0           grid_4.4.1              cli_3.6.3               #> [46] SparseArray_1.5.38      magrittr_2.0.3          S4Arrays_1.5.8          #> [49] utf8_1.2.4              ape_5.8                 rappdirs_0.3.3          #> [52] UCSC.utils_1.1.0        rmarkdown_2.28          httr_1.4.7              #> [55] ragg_1.3.3              evaluate_1.0.0          rlang_1.1.4             #> [58] Rcpp_1.0.13             tidytree_0.4.6          glue_1.7.0              #> [61] BiocManager_1.30.25     jsonlite_1.8.9          R6_2.5.1                #> [64] systemfonts_1.1.0       fs_1.6.4                zlibbioc_1.51.1"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Tuomas Borman. Author, maintainer. Leo Lahti. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Borman T, Lahti L (2024). HoloFoodR: R interface EBI HoloFood resource. R package version 0.99.9, https://github.com/EBI-Metagenomics/HoloFoodR.","code":"@Manual{,   title = {HoloFoodR: R interface to EBI HoloFood resource},   author = {Tuomas Borman and Leo Lahti},   year = {2024},   note = {R package version 0.99.9},   url = {https://github.com/EBI-Metagenomics/HoloFoodR}, }"},{"path":"/index.html","id":"holofoodr-","dir":"","previous_headings":"","what":"R interface to EBI HoloFood resource","title":"R interface to EBI HoloFood resource","text":"R package developed streamlining integration analysis EMBL-EBI HoloFood data. utility package simplifies access resource, enabling direct loading data formats tailored multiomics downstream analytics. tool, users can efficiently search retrieve data EBI HoloFood resource. retrieved data available MultiAssayExperiment / TreeSummarizedExperiment format similarly data acquired MGnifyR package MGnify database. compatibility ensures users can seamlessly combine analyze datasets sources, leading valuable insights intricate biological systems. research received funding Horizon 2020 Programme European Union within FindingPheno project grant agreement 952914.","code":""},{"path":"/index.html","id":"findingpheno-","dir":"","previous_headings":"","what":"FindingPheno","title":"R interface to EBI HoloFood resource","text":"FindingPheno, EU-funded project, dedicated developing computational tools methodologies integration analysis multi-omics data. primary objective deepen understanding interactions hosts microbiomes. FindingPheno website","code":""},{"path":"/index.html","id":"holofood-","dir":"","previous_headings":"","what":"HoloFood","title":"R interface to EBI HoloFood resource","text":"HoloFood, project funded EU’s Horizon 2020 programme, employed holistic, “hologenomic”, approach enhance efficiency food production systems. involved exploring biomolecular physiological processes triggered incorporation feed additives novel sustainable feeds farmed animals. HoloFood database, hosted European Bioinformatics Institute (EMBL-EBI), houses data gathered project, encompassing multiple omics, including metabolomics various biomolecular measurements. Notably, include data metagenomic untargeted metabolomic analyses. However, metagenomic data project can accessed MGnify database, untargeted metabolomic data stored MetaboLights database. explore available datasets HoloFood, can utilize API browser. HoloFood website HoloFood publications API browser API documentation","code":""},{"path":"/index.html","id":"mgnify-","dir":"","previous_headings":"","what":"MGnify","title":"R interface to EBI HoloFood resource","text":"EMBL-EBI’s MGnify serves repository microbiome data, offering wide array analyses encompassing metabarcoding, metatranscriptomic, metagenomic datasets diverse environments. platform provides comprehensive taxonomic assignments functional annotations datasets. data can accessed MGnifyR package. MGnify website MGnifyR","code":""},{"path":"/index.html","id":"metabolights-","dir":"","previous_headings":"","what":"MetaboLights","title":"R interface to EBI HoloFood resource","text":"MetaboLights, managed EMBL-EBI, serves repository metabolomic data. can accessed HoloFoodR package. MetaboLights website","code":""},{"path":"/index.html","id":"miaverse-","dir":"","previous_headings":"","what":"miaverse","title":"R interface to EBI HoloFood resource","text":"miaverse R/Bioconductor framework specialized microbiome downstream data analysis, leveraging TreeSummarizedExperiment class. offers comprehensive suite tools microbiome bioinformatics. Additionally, miaverse includes tutorial book Orchestrating Microbiome Analysis (OMA), aims guide users conducting microbiome data analysis sharing best practices microbiome data science. miaverse website Orchestrating Microbiome Analysis (OMA)","code":""},{"path":[]},{"path":"/index.html","id":"bioc-release","dir":"","previous_headings":"Installation","what":"Bioc-release","title":"R interface to EBI HoloFood resource","text":"","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\")  BiocManager::install(\"HoloFoodR\")"},{"path":"/index.html","id":"bioc-devel","dir":"","previous_headings":"Installation","what":"Bioc-devel","title":"R interface to EBI HoloFood resource","text":"","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\")  # The following initializes usage of Bioc devel BiocManager::install(version=\"devel\")  BiocManager::install(\"HoloFoodR\")"},{"path":"/index.html","id":"github","dir":"","previous_headings":"Installation","what":"GitHub","title":"R interface to EBI HoloFood resource","text":"","code":"remotes::install_github(\"EBI-Metagenomics/HoloFoodR\")"},{"path":"/index.html","id":"basic-usage","dir":"","previous_headings":"","what":"Basic usage","title":"R interface to EBI HoloFood resource","text":"detailed instructions read associated function help, function reference page vignette (vignette(\"HoloFoodR\"))","code":"library(HoloFoodR)  # Search samples samples <- doQuery(\"samples\")  # Search animals animals <- doQuery(\"animal\")  # Fetch data on certain sample samples <- c(\"ACCESSION_ID\") sample_data <- getData(accession.type = \"samples\", accession = samples)  # Fetch data on genome catalogues genome_catalogues <- getData(type = \"genome-catalogues\")  # Fetch data on genomes in certain genome catalogue catalogues <- c(\"ACCESSION_ID\") genomes <- getData(     type = \"genomes\",     accession.type = \"genome-catalogues\",     accession = catalogues)  # Fetch data on untargeted metabolites metabolites <- getMetaboLights(study_id)  # Fetch data as MultiAssayExperiment samples <- c(\"ACCESSION_ID\") mae <- getResult(accession = samples)"},{"path":"/reference/HoloFoodR.html","id":null,"dir":"Reference","previous_headings":"","what":"HoloFoodR package — HoloFoodR","title":"HoloFoodR package — HoloFoodR","text":"HoloFoodR implements interface EBI HoloFood database. See vignette general introduction package, [HoloFood](https://www.holofood.eu/) general HoloFood information, [API documentation](https://docs.holofooddata.org/api.html) details JSONAPI implementation.","code":""},{"path":[]},{"path":"/reference/HoloFoodR.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"HoloFoodR package — HoloFoodR","text":"Maintainer: Tuomas Borman tuomas.v.borman@utu.fi (ORCID) Authors: Leo Lahti leo.lahti@iki.fi (ORCID)","code":""},{"path":"/reference/doQuery.html","id":null,"dir":"Reference","previous_headings":"","what":"Search HoloFood database for animals, genome catalogues, samples, or viral catalogues — doQuery","title":"Search HoloFood database for animals, genome catalogues, samples, or viral catalogues — doQuery","text":"Search HoloFood database animals, genome catalogues, samples, viral catalogues","code":""},{"path":"/reference/doQuery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search HoloFood database for animals, genome catalogues, samples, or viral catalogues — doQuery","text":"","code":"doQuery(type, flatten = TRUE, ...)"},{"path":"/reference/doQuery.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search HoloFood database for animals, genome catalogues, samples, or viral catalogues — doQuery","text":"type Character scalar specifying type data query. Must one following options: \"animals\", \"genome-catalogues\", \"samples\" \"viral-catalogues\". flatten Logical scalar specifying whether flatten resulting data.frame. means columns multiple values separated multiple columns. (Default: TRUE) ... optional arguments: max.hits NULL integer scalar specifying   maximum number results fetch. NULL, results fetched.   (Default: NULL) spread.sample.types Logical scalar specifying whether   create spread sample types column animals data. animals data,   sample types column might multiple values might hard   explore. argument specifies whether create presence/absence table   sample types. (Default: TRUE) use.cache Logical scalar specifying whether   use cache. (Default: FALSE) cache.dir Character scalar specifying cache   directory. (Default: tempdir()) clear.cache Logical scalar specifying whether   remove clear cache (Default: FALSE)","code":""},{"path":"/reference/doQuery.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search HoloFood database for animals, genome catalogues, samples, or viral catalogues — doQuery","text":"data.frame","code":""},{"path":"/reference/doQuery.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search HoloFood database for animals, genome catalogues, samples, or viral catalogues — doQuery","text":"doQuery flexible query function can utilized search available animals, genome catalogues, samples, viral catalogues. Search results can filtered; example, animals can filtered based available samples. See [Api browser](https://www.holofooddata.org/api/docs) information filters. can find help customizing queries [](https://emg-docs.readthedocs.io/en/latest/api.html#customising-queries).","code":""},{"path":"/reference/doQuery.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search HoloFood database for animals, genome catalogues, samples, or viral catalogues — doQuery","text":"","code":"# Find animals results. The maximum amount of results is 100. Use filter # so that only chicken is searched. res <- doQuery(\"animals\", max.hits = 100, system = \"chicken\") head(res) #>        accession  system                                   canonical_url #> 1 SAMEA112904733 chicken https://www.ebi.ac.uk/biosamples/SAMEA112904733 #> 2 SAMEA112904734 chicken https://www.ebi.ac.uk/biosamples/SAMEA112904734 #> 3 SAMEA112904735 chicken https://www.ebi.ac.uk/biosamples/SAMEA112904735 #> 4 SAMEA112904736 chicken https://www.ebi.ac.uk/biosamples/SAMEA112904736 #> 5 SAMEA112904737 chicken https://www.ebi.ac.uk/biosamples/SAMEA112904737 #> 6 SAMEA112904738 chicken https://www.ebi.ac.uk/biosamples/SAMEA112904738 #>   histological host_genomic inflammatory_markers metabolomic #> 1        FALSE         TRUE                FALSE       FALSE #> 2         TRUE         TRUE                 TRUE       FALSE #> 3         TRUE         TRUE                 TRUE       FALSE #> 4        FALSE         TRUE                FALSE       FALSE #> 5         TRUE         TRUE                 TRUE       FALSE #> 6        FALSE         TRUE                FALSE       FALSE #>   metabolomic_targeted metagenomic_assembly metatranscriptomic transcriptomic #> 1                FALSE                 TRUE              FALSE          FALSE #> 2                 TRUE                 TRUE               TRUE           TRUE #> 3                 TRUE                 TRUE              FALSE           TRUE #> 4                FALSE                 TRUE              FALSE          FALSE #> 5                 TRUE                 TRUE               TRUE           TRUE #> 6                 TRUE                 TRUE              FALSE          FALSE"},{"path":"/reference/getData.html","id":null,"dir":"Reference","previous_headings":"","what":"Get data from HoloFood database — getData","title":"Get data from HoloFood database — getData","text":"Get data HoloFood database","code":""},{"path":"/reference/getData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get data from HoloFood database — getData","text":"","code":"getData(   type = NULL,   accession.type = NULL,   accession = NULL,   flatten = FALSE,   ... )"},{"path":"/reference/getData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get data from HoloFood database — getData","text":"type NULL character scalar specifying type data query. Must one following options: \"analysis-summaries\", \"animals\", \"genome-catalogues\", \"samples\", \"sample_metadata_markers\" \"viral-catalogues\". genome viral catalogues fetched accession ID, type can also \"genomes\" \"fragments\". (Default: NULL) accession.type NULL character scalar specifying type accession IDs. Must one following options: \"animals\", \"genome-catalogues\", \"samples\" \"viral-catalogues\". (Default: NULL) accession NULL character vector specifying accession IDs type accession.type. (Default: NULL) flatten Logical scalar specifying whether flatten resulting data.frame. means columns multiple values separated multiple columns. (Default: FALSE) ... optional arguments: max.hits NULL integer scalar specifying   maximum number results fetch. NULL, results fetched.   (Default: NULL) use.cache Logical scalar specifying whether   use cache (Default: FALSE) cache.dir Character scalar specifying cache   directory. (Default: tempdir()) clear.cache Logical scalar specifying whether   remove clear cache (Default: FALSE)","code":""},{"path":"/reference/getData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get data from HoloFood database — getData","text":"list data.frame","code":""},{"path":"/reference/getData.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get data from HoloFood database — getData","text":"getData, can fetch data database. Compared getResult, function flexible since can fetch kind data database. However, function returns data without wrangling list data.frame optimized format fetching data samples. Search results can filtered; example, animals can filtered based available samples. See [Api browser](https://www.holofooddata.org/api/docs) information filters. can find help customizing queries [](https://emg-docs.readthedocs.io/en/latest/api.html#customising-queries).","code":""},{"path":[]},{"path":"/reference/getData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get data from HoloFood database — getData","text":"","code":"# Find genome catalogues catalogues <- getData(type = \"genome-catalogues\") head(catalogues) #>                 id                   title #> 1  salmon-gut-v2-0  HoloFood Salmon Gut v2 #> 2 chicken-gut-v2-0 HoloFood Chicken Gut v2 #>                                         biome related_mag_catalogue_id  system #> 1  root:Host-associated:Fish:Digestive system  non-model-fish-gut-v2-0  salmon #> 2 root:Host-associated:Birds:Digestive system       chicken-gut-v1-0-1 chicken #>   analysis_summaries #> 1       c(\"HoloF.... #> 2       c(\"HoloF....  # Find genomes based on certain genome catalogue iD res <- getData(     type = \"genomes\", accession.type = \"genome-catalogues\",     accession = catalogues[1, \"id\"], max.hits = 100) head(res) #>       accession cluster_representative #> 1 MGYG000307500          MGYG000307500 #> 2 MGYG000307501          MGYG000307501 #> 3 MGYG000307502          MGYG000307501 #> 4 MGYG000307503          MGYG000299622 #> 5 MGYG000307504          MGYG000299579 #> 6 MGYG000307505          MGYG000299579 #>                                                                                                                      taxonomy #> 1                                                    Bacteria > Firmicutes_A > Clostridia > Oscillospirales > Ruminococcaceae #> 2 Bacteria > Proteobacteria > Gammaproteobacteria > Pseudomonadales > Pseudomonadaceae > Pseudomonas > Pseudomonas aeruginosa #> 3 Bacteria > Proteobacteria > Gammaproteobacteria > Pseudomonadales > Pseudomonadaceae > Pseudomonas > Pseudomonas aeruginosa #> 4          Bacteria > Proteobacteria > Gammaproteobacteria > Enterobacterales > Aeromonadaceae > Aeromonas > Aeromonas sobria #> 5                                                       Bacteria > Firmicutes > Bacilli > Mycoplasmatales > Mycoplasmoidaceae #> 6                                                       Bacteria > Firmicutes > Bacilli > Mycoplasmatales > Mycoplasmoidaceae #>                                                representative_url metadata1 #> 1 https://www.ebi.ac.uk/metagenomics/api/v1/genomes/MGYG000307500       196 #> 2 https://www.ebi.ac.uk/metagenomics/api/v1/genomes/MGYG000307501       197 #> 3 https://www.ebi.ac.uk/metagenomics/api/v1/genomes/MGYG000307501       198 #> 4 https://www.ebi.ac.uk/metagenomics/api/v1/genomes/MGYG000299622       199 #> 5 https://www.ebi.ac.uk/metagenomics/api/v1/genomes/MGYG000299579       200 #> 6 https://www.ebi.ac.uk/metagenomics/api/v1/genomes/MGYG000299579       201 #>   metadata.Genome_type metadata.Length metadata.N_contigs metadata.N50 #> 1                  MAG         1319783                 19       153761 #> 2                  MAG         6676386                136        83355 #> 3                  MAG         4766025               4741         1104 #> 4                  MAG         2381842                367         8519 #> 5                  MAG          681326                 38        37281 #> 6                  MAG          627706                 26        43119 #>   metadata.GC_content metadata.Completeness metadata.Contamination #> 1                27.3                 85.79                    0.0 #> 2               66.27                 98.37                  0.192 #> 3               64.82                 68.36                  2.053 #> 4               59.04                 58.95                   0.09 #> 5               25.14                 96.02                  0.384 #> 6               25.04                 95.25                  0.384 #>   metadata.rRNA_5S metadata.rRNA_16S metadata.rRNA_23S metadata.tRNAs #> 1              0.0               0.0               0.0             18 #> 2              0.0               0.0               0.0             17 #> 3            93.28              36.2             99.04             15 #> 4             91.6               0.0               0.0             14 #> 5              0.0             99.74             99.59             19 #> 6              0.0             99.74             99.59             19 #>   metadata.Genome_accession metadata.Sample_accession metadata.Study_accession #> 1               ERZ15182294            SAMEA112246717                ERP136460 #> 2               ERZ15182298            SAMEA112246686                ERP136460 #> 3               ERZ15182309            SAMEA112246683                ERP136460 #> 4               ERZ15182314            SAMEA112246713                ERP136460 #> 5               ERZ15233654            SAMEA112264417                ERP125469 #> 6               ERZ15233655            SAMEA112264472                ERP125469 #>   metadata.Country metadata.Continent #> 1           Norway             Europe #> 2           Norway             Europe #> 3           Norway             Europe #> 4           Norway             Europe #> 5           Norway             Europe #> 6           Norway             Europe #>                                                                                                                                       metadata.FTP_download #> 1 ftp://ftp.ebi.ac.uk/pub/databases/metagenomics/mgnify_genomes/non-model-fish-gut/v2.0/all_genomes/MGYG0003075/MGYG000307500/genomes1/MGYG000307500.gff.gz #> 2 ftp://ftp.ebi.ac.uk/pub/databases/metagenomics/mgnify_genomes/non-model-fish-gut/v2.0/all_genomes/MGYG0003075/MGYG000307501/genomes1/MGYG000307501.gff.gz #> 3 ftp://ftp.ebi.ac.uk/pub/databases/metagenomics/mgnify_genomes/non-model-fish-gut/v2.0/all_genomes/MGYG0003075/MGYG000307501/genomes1/MGYG000307502.gff.gz #> 4 ftp://ftp.ebi.ac.uk/pub/databases/metagenomics/mgnify_genomes/non-model-fish-gut/v2.0/all_genomes/MGYG0002996/MGYG000299622/genomes1/MGYG000307503.gff.gz #> 5 ftp://ftp.ebi.ac.uk/pub/databases/metagenomics/mgnify_genomes/non-model-fish-gut/v2.0/all_genomes/MGYG0002995/MGYG000299579/genomes1/MGYG000307504.gff.gz #> 6 ftp://ftp.ebi.ac.uk/pub/databases/metagenomics/mgnify_genomes/non-model-fish-gut/v2.0/all_genomes/MGYG0002995/MGYG000299579/genomes1/MGYG000307505.gff.gz #>   metadata.Host_species annotations.cazy.GH annotations.cazy.PL #> 1           Salmo salar                   7                   0 #> 2           Salmo salar                  24                   0 #> 3           Salmo salar                  24                   0 #> 4           Salmo salar                  27                   0 #> 5           Salmo salar                   0                   0 #> 6           Salmo salar                   0                   0 #>   annotations.cazy.CE annotations.cazy.AA annotations.cazy.CB #> 1                   0                   0                   1 #> 2                   3                   1                   4 #> 3                   3                   1                   4 #> 4                   1                   1                   6 #> 5                   0                   0                   0 #> 6                   0                   0                   0 #>   annotations.cazy.GT annotations.cazy.CL #> 1                   7                   0 #> 2                  34                   0 #> 3                  34                   0 #> 4                  20                   0 #> 5                   2                   0 #> 6                   2                   0"},{"path":"/reference/getMetaboLights.html","id":null,"dir":"Reference","previous_headings":"","what":"Get metabolomic data from MetaboLights database — getMetaboLights","title":"Get metabolomic data from MetaboLights database — getMetaboLights","text":"Get metabolomic data MetaboLights database","code":""},{"path":"/reference/getMetaboLights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get metabolomic data from MetaboLights database — getMetaboLights","text":"","code":"getMetaboLights(study.id, ...)  getMetaboLightsFile(study.id, file, ...)"},{"path":"/reference/getMetaboLights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get metabolomic data from MetaboLights database — getMetaboLights","text":"study.id character vector specifying study identifier data going fetched MetaboLights database. ... optional arguments: cache.dir Character scalar specifying directory   downloaded file stored. (Default: tempdir()) timeout Integer scalar specifying timeout   seconds loading file. (Default: 5*60) file character vector specifying files fetched.","code":""},{"path":"/reference/getMetaboLights.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get metabolomic data from MetaboLights database — getMetaboLights","text":"list","code":""},{"path":"/reference/getMetaboLights.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get metabolomic data from MetaboLights database — getMetaboLights","text":"HoloFood database primarily comprises targeted metabolomic data, omitting non-targeted metabolomic information. Nonetheless, features URLs linking studies within MetaboLights database. functionality enables users access non-targeted metabolomic data. getMetaboLights function returns structured list encompassing processed data data.frame format study metadata, assay metadata, assay. metadata includes file names spectra data. files can loaded getMetaboLightsFile. Alternatively, identified study files fetch, can refer [vignette](https://rformassspectrometry.github.io/MsIO/articles/MsIO.html#loading-data--metabolights) instructions loading data directly MsExperiment object, specifically designed metabolomics spectra data.","code":""},{"path":[]},{"path":"/reference/getMetaboLights.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get metabolomic data from MetaboLights database — getMetaboLights","text":"","code":"# This example is not run, because the server fails to respond sometimes. if( FALSE ){     res <- getMetaboLights(\"MTBLS4381\")     file_paths <- getMetaLightsFile(         study.id = \"MTBLS4381\",         file = res[[\"assay_meta\"]][[\"Raw Spectral Data File\"]]         ) }"},{"path":"/reference/getResult.html","id":null,"dir":"Reference","previous_headings":"","what":"Get data on samples from HoloFood database — getResult","title":"Get data on samples from HoloFood database — getResult","text":"Get data samples HoloFood database","code":""},{"path":"/reference/getResult.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get data on samples from HoloFood database — getResult","text":"","code":"getResult(accession, ...)"},{"path":"/reference/getResult.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get data on samples from HoloFood database — getResult","text":"accession Character vector specifying accession IDs type samples. ... optional arguments: use.cache Logical scalar specifying whether   use cache. Note get.metabolomic = TRUE specified,   file MetaboLights stored local system location   specified cache.dir despite value use.cache.   (Default: FALSE) cache.dir Character scalar specifying cache   directory. (Default: tempdir()) clear.cache Logical scalar specifying whether   use.cache (Default: FALSE) assay.type Character scalar specifying name   assay resulting TreeSummarizedExperiment object.   (Default: \"counts\") get.metabolomic Logical scalar specifying whether   retrieve processed metabolomic data MetaboLights database.   retrieving spectra data, refer   getMetaboLights documentation.   (Default: FALSE)","code":""},{"path":"/reference/getResult.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get data on samples from HoloFood database — getResult","text":"MultiAssayExperiment","code":""},{"path":"/reference/getResult.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get data on samples from HoloFood database — getResult","text":"getResult, can fetch data samples HoloFood database. Compared getData, function convenient fetching samples data converts data MultiAssayExperiment different omics stored TreeSummarizedExperiment objects optimized downstream analytics. Columns returned MultiAssayExperiment individual animals. columns linked individual samples stored TreeSummarizedExperiment objects. HoloFood database lacks non-targeted metabolomic data can fetched MetaboLights resource. Certain datasets include processed features. datasets can retrieved function getResult integrates metabolomic data datasets HoloFood. Furthermore, HoloFoodR database include metagenomic assembly data, users can access data MGnify database. MGnifyR package provides convenient interface accessing database. employing MGnifyR::getResult(), users can obtain data formatted MultiAssayExperiment object, containing multiple TreeSummarizedExperiment objects. Consequently, data HoloFood MGnify databases inherently compatible subsequent downstream analysis.","code":""},{"path":[]},{"path":"/reference/getResult.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get data on samples from HoloFood database — getResult","text":"","code":"# Find samples on certain animal samples <- doQuery(\"samples\", animal_accession = \"SAMEA112904746\")  # Get the data mae <- getResult(samples[[\"accession\"]]) #> Warning: Data for the following samples cannot be found. The sample types are metagenomic_assembly, host_genomic, transcriptomic and metatranscriptomic. (Note that metagenomic assemblies can be found from the MGnify database. See MGnifyR package.): #> 'SAMEA10130039', 'SAMEA13389496', 'SAMEA13389497', 'SAMEA13901618', 'SAMEA13901619', 'SAMEA13929785', 'SAMEA7571815' mae #> A MultiAssayExperiment object of 8 listed #>  experiments with user-defined names and respective classes. #>  Containing an ExperimentList class object of length 8: #>  [1] BIOGENIC AMINES: TreeSummarizedExperiment with 7 rows and 2 columns #>  [2] FATTY ACIDS: TreeSummarizedExperiment with 19 rows and 2 columns #>  [3] HISTOLOGY: TreeSummarizedExperiment with 20 rows and 2 columns #>  [4] INFLAMMATORY MARKERS: TreeSummarizedExperiment with 14 rows and 2 columns #>  [5] metagenomic_assembly: TreeSummarizedExperiment with 0 rows and 2 columns #>  [6] host_genomic: TreeSummarizedExperiment with 0 rows and 2 columns #>  [7] transcriptomic: TreeSummarizedExperiment with 0 rows and 2 columns #>  [8] metatranscriptomic: TreeSummarizedExperiment with 0 rows and 1 columns #> Functionality: #>  experiments() - obtain the ExperimentList instance #>  colData() - the primary/phenotype DataFrame #>  sampleMap() - the sample coordination DataFrame #>  `$`, `[`, `[[` - extract colData columns, subset, or experiment #>  *Format() - convert into a long or wide DataFrame #>  assays() - convert ExperimentList to a SimpleList of matrices #>  exportClass() - save data to flat files"}]
